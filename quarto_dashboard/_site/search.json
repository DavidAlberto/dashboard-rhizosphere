[
  {
    "objectID": "quarto_dashboard.html",
    "href": "quarto_dashboard.html",
    "title": "Phyloseq Dashboard",
    "section": "",
    "text": "Shiny applications not supported in static R Markdown documents"
  },
  {
    "objectID": "panels/paneldoc/ordination.html",
    "href": "panels/paneldoc/ordination.html",
    "title": "1 Ordination Panel Details",
    "section": "",
    "text": "This panel provides an interface to phyloseq’s plot_ordination function.\n\n\n\n\nThis top section defines key aspects of the ordination calculation. This includes the distance on which it is based, the method used to decompose that distance into axes for graphical exploration, and which features of the ordination result to display.\n\nType - Toggle between a network with Samples or Taxa as nodes.\nMethod - The Ordination Method to use. This is an interface to phyloseq’s ordinate function.\nDistance - The distance method. This is a direct interface to phyloseq’s distance function.\nDisplay - The ordination display type. This is equivalent to the type argument in the plot_ordination function.\nConstraint - The variables to include for constrained ordination. Multiple non-NULL variables are combined in a formula. e.g. ~ Var1 + Var2 + Var3. Not that for ordination constraints only the right-hand side is relevant. Generally speaking, this is less flexible than a full formula interface. For conditioning variables, explicit interaction terms, and other features of R formulae, please use phyloseq/R directly.\nTransform - This option is very important. It determines whether to use filtered-counts, or some transformation of the filtered count values. See the Transform panel for the definition of each available option.\n\n\n\n\n\nX, Y - Select the ordination axes to map to the X (horizontal) and Y (vertical) axes. Default is first and second ordination axes, respectively.\nColor - The variable selected here is mapped to point color.\nShape - The variable selected here is mapped to point shape.\nFacet Row - This is an interface to ggplot2’s facet_grid function. Faceting is a means of splitting the data into separate panels according to one or more variables in the data. This can have many advantages, especially to alleviate overplotting, and to clarify key comparisons. In this case, the Facet Row widget provides available variables that will be mapped to panel-rows in the resulting grid of facets panels. You can select more than one variable. You should delete/unselect NULL when selecting facets.\nFacet Col - This is the same as Facet Row above, but this widget controls the variables that will arrange the data into panel columns.\nLabel - A variable to map to point label. The text at each point will reflect the value of the chosen variable. The small numeric widgets to the right adjust label size (Lab Sz) and vertical justification (V-Just).\n\n\n\n\nPalette, Size, and Opacity - refer to the way points are drawn.\n\nPalette - Refers to color palette. Only applicable if you have selected a Color variable in the Aesthetic Mapping section. Explore the Palette panel within Shiny-phyloseq, or more details about color palettes at ColorBrewer.\nTheme - For the most part these refer to ggplot2 themes, which generally encompass stylistic graphical features, such as axis line types, axis label fonts and spacing, background color, etc.\nSize - This refers to point size.\nOpacity - The transparency of points in the graphic, on a [0, 1] scale; with zero meaning so transparent points are invisible, and one meaning points are perfectly opaque (the default).\n\n\n\n\nFigure dimensions (in inches), file format, and download button (DL)."
  },
  {
    "objectID": "panels/paneldoc/ordination.html#widget-sections",
    "href": "panels/paneldoc/ordination.html#widget-sections",
    "title": "1 Ordination Panel Details",
    "section": "",
    "text": "This top section defines key aspects of the ordination calculation. This includes the distance on which it is based, the method used to decompose that distance into axes for graphical exploration, and which features of the ordination result to display.\n\nType - Toggle between a network with Samples or Taxa as nodes.\nMethod - The Ordination Method to use. This is an interface to phyloseq’s ordinate function.\nDistance - The distance method. This is a direct interface to phyloseq’s distance function.\nDisplay - The ordination display type. This is equivalent to the type argument in the plot_ordination function.\nConstraint - The variables to include for constrained ordination. Multiple non-NULL variables are combined in a formula. e.g. ~ Var1 + Var2 + Var3. Not that for ordination constraints only the right-hand side is relevant. Generally speaking, this is less flexible than a full formula interface. For conditioning variables, explicit interaction terms, and other features of R formulae, please use phyloseq/R directly.\nTransform - This option is very important. It determines whether to use filtered-counts, or some transformation of the filtered count values. See the Transform panel for the definition of each available option.\n\n\n\n\n\nX, Y - Select the ordination axes to map to the X (horizontal) and Y (vertical) axes. Default is first and second ordination axes, respectively.\nColor - The variable selected here is mapped to point color.\nShape - The variable selected here is mapped to point shape.\nFacet Row - This is an interface to ggplot2’s facet_grid function. Faceting is a means of splitting the data into separate panels according to one or more variables in the data. This can have many advantages, especially to alleviate overplotting, and to clarify key comparisons. In this case, the Facet Row widget provides available variables that will be mapped to panel-rows in the resulting grid of facets panels. You can select more than one variable. You should delete/unselect NULL when selecting facets.\nFacet Col - This is the same as Facet Row above, but this widget controls the variables that will arrange the data into panel columns.\nLabel - A variable to map to point label. The text at each point will reflect the value of the chosen variable. The small numeric widgets to the right adjust label size (Lab Sz) and vertical justification (V-Just).\n\n\n\n\nPalette, Size, and Opacity - refer to the way points are drawn.\n\nPalette - Refers to color palette. Only applicable if you have selected a Color variable in the Aesthetic Mapping section. Explore the Palette panel within Shiny-phyloseq, or more details about color palettes at ColorBrewer.\nTheme - For the most part these refer to ggplot2 themes, which generally encompass stylistic graphical features, such as axis line types, axis label fonts and spacing, background color, etc.\nSize - This refers to point size.\nOpacity - The transparency of points in the graphic, on a [0, 1] scale; with zero meaning so transparent points are invisible, and one meaning points are perfectly opaque (the default).\n\n\n\n\nFigure dimensions (in inches), file format, and download button (DL)."
  },
  {
    "objectID": "panels/paneldoc/d3Network.html",
    "href": "panels/paneldoc/d3Network.html",
    "title": "1 D3 Network Panel Details",
    "section": "",
    "text": "This panel provides a special D3 interactive interface to phyloseq’s plot_net function. You can hover over node points to reveal a label, and you can grab nodes and drag them around to your desired orientation. Different subnetworks attempt to avoid overlapping one another via a slow repulsion-like algorithm.\nCalculation time depends a lot on the size of your data (number of OTUs/samples) and the distance method chosen.\n\n\n\n\nThis top section defines key aspects of the network structure.\n\nType - Toggle between a network with Samples or Taxa as nodes.\nDistance - The distance method. This is a direct interface to phyloseq’s distance function.\nMax D - Maximum Distance. The graphic includes an edge if two nodes have a smaller distance than this value. This is exactly the same as the Max D variable in the static Network panel.\nTransform - This option is very important. It determines whether to use filtered-counts, or some transformation of the filtered count values. See the Transform panel for the definition of each available option.\n\n\n\n\nThese widgets correspond to aesthetic mappings on nodes. Color map code-color to a particular single variable. Label allows labeling of nodes with text that only appears after hovering over the node/point of interest. If multiple non-NULL variables are selected, their values are concatenated together in selected order as a single hover-actuated label for each node.\n\n\n\n\nOpacity - The transparency of node points.\nScale - The scaling factor that maps node-distance to edge line width.\nShade - The edge line color shade.\n\n\n\n\nThis sections includes the figure dimensions scaling in pixels rather than inches, as well as a download button (DL). There is no file-format button because the format is always a stand-alone HTML that should be sharable as an interactive graphic.\n\n\n\nBig thanks to Christopher Gandrud for networkD3 and also to the team at Shiny and RStudio."
  },
  {
    "objectID": "panels/paneldoc/d3Network.html#widget-sections",
    "href": "panels/paneldoc/d3Network.html#widget-sections",
    "title": "1 D3 Network Panel Details",
    "section": "",
    "text": "This top section defines key aspects of the network structure.\n\nType - Toggle between a network with Samples or Taxa as nodes.\nDistance - The distance method. This is a direct interface to phyloseq’s distance function.\nMax D - Maximum Distance. The graphic includes an edge if two nodes have a smaller distance than this value. This is exactly the same as the Max D variable in the static Network panel.\nTransform - This option is very important. It determines whether to use filtered-counts, or some transformation of the filtered count values. See the Transform panel for the definition of each available option.\n\n\n\n\nThese widgets correspond to aesthetic mappings on nodes. Color map code-color to a particular single variable. Label allows labeling of nodes with text that only appears after hovering over the node/point of interest. If multiple non-NULL variables are selected, their values are concatenated together in selected order as a single hover-actuated label for each node.\n\n\n\n\nOpacity - The transparency of node points.\nScale - The scaling factor that maps node-distance to edge line width.\nShade - The edge line color shade.\n\n\n\n\nThis sections includes the figure dimensions scaling in pixels rather than inches, as well as a download button (DL). There is no file-format button because the format is always a stand-alone HTML that should be sharable as an interactive graphic.\n\n\n\nBig thanks to Christopher Gandrud for networkD3 and also to the team at Shiny and RStudio."
  },
  {
    "objectID": "panels/paneldoc/richness.html",
    "href": "panels/paneldoc/richness.html",
    "title": "1 Richness Panel",
    "section": "",
    "text": "This panel is based on phyloseq’s plot_richness function.\nAlthough the function name includes the word richness, which usually refers to the total number of species/OTUs in a sample or environment – either observed or estimated – this panel and its underlying function are intended for estimating and plotting alpha diversity in general.\n\n\n\n\nThe aesthetic mapping is intended to help annotate and organize the alpha-diversity results for easier comprehension.\n\nX-Axis - The variable selected here is mapped to the horizontal (“X”) axis. The default selection is \"Sample\", which means every sample gets a separate discrete position on the horizontal axis. The “Y” axis is always mapped to the respective alpha-diversity value.\nColor - The variable selected here is mapped to the color shade of points. Take care that selected discrete variables do not surpass the number of available aesthetic categories (e.g. more categories in data than you have color shades).\nShape - The variable selected here is mapped to point shape. Use the same care as for Color, but note that there are only 6 different shapes.\nAlpha Measures - Select one or more alpha-diversity measures. They will be plotted as separate panels side-by-side.\nLabel - A variable to map to point label. The text at each point will reflect the value of the chosen variable. The small numeric widgets to the right adjust label size (Lab Sz) and vertical justification (V-Just).\n\n\n\n\nPalette, Size, and Opacity - refer to the way points are drawn.\n\nPalette - Refers to color palette. Only applicable if you have selected a Color variable in the Aesthetic Mapping section. Explore the Palette panel within Shiny-phyloseq, or more details about color palettes at ColorBrewer.\nTheme - For the most part these refer to ggplot2 themes, which generally encompass stylistic graphical features, such as axis line types, axis label fonts and spacing, background color, etc.\nSize - This refers to point size.\nOpacity - The transparency of points in the graphic, on a [0, 1] scale; with zero meaning so transparent points are invisible, and one meaning points are perfectly opaque (the default).\nMax. Labels - Maximum number of X-axis labels. Discrete-variable only. If number of X-axis discrete categories exceeds this value, then no axis labels are shown.\nAngle - This refers to the label angle for the horizontal X-axis.\nSource Data - What stage of data to include. Original unfiltered counts are recommended.\n\n\n\n\nFigure dimensions (in inches), file format, and download button (DL)."
  },
  {
    "objectID": "panels/paneldoc/richness.html#sidebar-widget-details",
    "href": "panels/paneldoc/richness.html#sidebar-widget-details",
    "title": "1 Richness Panel",
    "section": "",
    "text": "The aesthetic mapping is intended to help annotate and organize the alpha-diversity results for easier comprehension.\n\nX-Axis - The variable selected here is mapped to the horizontal (“X”) axis. The default selection is \"Sample\", which means every sample gets a separate discrete position on the horizontal axis. The “Y” axis is always mapped to the respective alpha-diversity value.\nColor - The variable selected here is mapped to the color shade of points. Take care that selected discrete variables do not surpass the number of available aesthetic categories (e.g. more categories in data than you have color shades).\nShape - The variable selected here is mapped to point shape. Use the same care as for Color, but note that there are only 6 different shapes.\nAlpha Measures - Select one or more alpha-diversity measures. They will be plotted as separate panels side-by-side.\nLabel - A variable to map to point label. The text at each point will reflect the value of the chosen variable. The small numeric widgets to the right adjust label size (Lab Sz) and vertical justification (V-Just).\n\n\n\n\nPalette, Size, and Opacity - refer to the way points are drawn.\n\nPalette - Refers to color palette. Only applicable if you have selected a Color variable in the Aesthetic Mapping section. Explore the Palette panel within Shiny-phyloseq, or more details about color palettes at ColorBrewer.\nTheme - For the most part these refer to ggplot2 themes, which generally encompass stylistic graphical features, such as axis line types, axis label fonts and spacing, background color, etc.\nSize - This refers to point size.\nOpacity - The transparency of points in the graphic, on a [0, 1] scale; with zero meaning so transparent points are invisible, and one meaning points are perfectly opaque (the default).\nMax. Labels - Maximum number of X-axis labels. Discrete-variable only. If number of X-axis discrete categories exceeds this value, then no axis labels are shown.\nAngle - This refers to the label angle for the horizontal X-axis.\nSource Data - What stage of data to include. Original unfiltered counts are recommended.\n\n\n\n\nFigure dimensions (in inches), file format, and download button (DL)."
  },
  {
    "objectID": "panels/paneldoc/transform.html",
    "href": "panels/paneldoc/transform.html",
    "title": "1 ",
    "section": "",
    "text": "NOTE: This is merely a documentation panel.\nThe following subsections define different options available in one or more of the Transform widgets that are located on other panels in Shiny-phyloseq.\n\nImplication - When one of the following options is selected, it implies that the transformed values are being used for the analysis/graphics of the currently-active panel that you are looking at.\nEfficiency - The choice of transformation in one widget does not affect the Transform widget selection in other panels – so you can freely try different transformations in one panel without worrying that you are inadvertantly changing the result you’ve already seen in some other panel. However, the transform computation for a given transformation option is always the same so Shiny-phyloseq will only need to compute the transformation the first time that you select it in any panel. This notion is reset if you change the dataset selection on the Data panel, or if you change the filtering options in the Filter panel.\n\n\n\nThe Counts option is the default, and simply means that the filtered count values are used in the respective analysis of the currently active panel. No calculation is performed or required. If you skipped the Filter panel, then this option implies that the original unfiltered counts values are being used.\n\n\n\nThis option means that the simple proportion values are being used. All entries in the OTU table are divided by their respective library size. In an OTU-by-Sample table, this means dividing every value by its column’s sum. This is equivalent in phyloseq to the following\ntransform_sample_counts(physeq, function(x) x/sum(x))\n\n\n\nThe the DESeq2 package provides two forms of variance-stabilizing transformations. Both the DESeq2 beginner’s vignette and the DESeq2 main vignette, Data transformations and visualization section, provide helpful theoretical information about these transformations, and why they might be useful for sample-wise exploratory data analysis.\nThe RLog option is one of our favorites, and implies the results of a Regularized Transformation. Because this is an interactive tool and these dispersion estimates can sometimes take a long time to calculate, we have implemented this option with the fast = TRUE option. This helps tremendously in wait-time, at some potential cost to accuracy that you might want to be aware of. See the rlog documentation of DESeq2 for more details. The blind=TRUE option is also used, meaning that the entire dataset is used for dispersion estimation, rather than separating the samples by their experimental design class. In some instances this might imply an overestimate of dispersion, but is a conservative choice in the context of Shiny-phyloseq, because there is a potentially wide-range of experimental designs. For more complicated designs, or if dispersion is being wildly overestimated as a result of this choice, you may want to transform your data ahead of time, in batch.\nTo that end, and for your own guidance using Shiny-phyloseq, the following is an example of the regularized log transformation implemented in Shiny-phyloseq.\ndds = phyloseq_to_deseq2(physeq, ~ 1)\nrld &lt;- DESeq2::rlog(dds, blind = TRUE, fast = TRUE)\nrlogMat &lt;- GenomicRanges::assay(rld)\nphyseq1 = physeq\notu_table(physeq1) &lt;- otu_table(rlogMat, taxa_are_rows = TRUE)\nwhere physeq is an object containing the imported experimental data, represented in phyloseq format.\n\n\n\nCLR transformation is championed in an article describing ALDEx2 for analyzing HTSeq count data.\nDefined in 1986 by Aitchison, a more-recent article (Egozcue 2003) defines and explains some details surrounding CLR.\nCLR can be defined as\nx / g(x)\nWhere x is our original vector of compositional values, and g(x) is the geometric mean of x.\nSo, to define a zero- and NA-tolerant function for calculating CLR:\nx = c(0, 0, 15, 3, 1, 0, 9)\ngm_mean = function(x, na.rm=TRUE){\n  # The geometric mean, with some error-protection bits.\n  exp(sum(log(x[x &gt; 0 & !is.na(x)]), na.rm=na.rm) / length(x))\n}\nclr = function(x, base=2){\n  x &lt;- log((x / gm_mean(x)), base)\n  x[!is.finite(x) | is.na(x)] &lt;- 0.0\n  return(x)\n}\nclr(x, 2)\n## [1]  0.0000  0.0000  2.6695  0.3476 -1.2374  0.0000  1.9325\nclr(x, exp(1))\n## [1]  0.0000  0.0000  1.8504  0.2409 -0.8577  0.0000  1.3395\nExample from aldex2 paper:\nx = c(10, 35, 50, 500)\nclr(x, 2)\n## [1] -2.4433 -0.6359 -0.1214  3.2006\nThe values reported in the ALDex2 article for their example were -2.44, -0.64, -0.12, 3.2. Which matches the rounded versions exactly,\nc(-2.44, -0.64, -0.12, 3.20) - round(clr(x, 2), 2)\n## [1] 0 0 0 0\nNote that they use a Bayesian method for handling zeroes in the ALDex2 artice. This approach assumes that the reason no reads were detected in some features was because of sampling variance. This is of course wrong in the microbial case. It is possible for microbes to be present in some samples, and truly absent in others.\nHere is what the example values look like if there was one or two zeroes present, in my formulation of the transformation.\nx = c(10, 35, 50, 500)\nclr(x, 2)\n## [1] -2.4433 -0.6359 -0.1214  3.2006\nx = c(10, 35, 50, 500, 0)\nclr(x, 2)\n## [1] -1.2902  0.5171  1.0317  4.3536  0.0000\nx = c(10, 35, 50, 500, 0, 0)\nclr(x, 2)\n## [1] -0.5215  1.2858  1.8004  5.1223  0.0000  0.0000\nThe presence of zeroes clearly makes a difference in the CLR result, as expected by how they are (somewhat crudely) managed in this approach. It does not change the ranking of features, but shifts them more positive (it is equivalent to replacing values &lt;=0 with a 1)."
  },
  {
    "objectID": "panels/paneldoc/transform.html#counts",
    "href": "panels/paneldoc/transform.html#counts",
    "title": "1 ",
    "section": "",
    "text": "The Counts option is the default, and simply means that the filtered count values are used in the respective analysis of the currently active panel. No calculation is performed or required. If you skipped the Filter panel, then this option implies that the original unfiltered counts values are being used."
  },
  {
    "objectID": "panels/paneldoc/transform.html#prop",
    "href": "panels/paneldoc/transform.html#prop",
    "title": "1 ",
    "section": "",
    "text": "This option means that the simple proportion values are being used. All entries in the OTU table are divided by their respective library size. In an OTU-by-Sample table, this means dividing every value by its column’s sum. This is equivalent in phyloseq to the following\ntransform_sample_counts(physeq, function(x) x/sum(x))"
  },
  {
    "objectID": "panels/paneldoc/transform.html#rlog---regularized-log",
    "href": "panels/paneldoc/transform.html#rlog---regularized-log",
    "title": "1 ",
    "section": "",
    "text": "The the DESeq2 package provides two forms of variance-stabilizing transformations. Both the DESeq2 beginner’s vignette and the DESeq2 main vignette, Data transformations and visualization section, provide helpful theoretical information about these transformations, and why they might be useful for sample-wise exploratory data analysis.\nThe RLog option is one of our favorites, and implies the results of a Regularized Transformation. Because this is an interactive tool and these dispersion estimates can sometimes take a long time to calculate, we have implemented this option with the fast = TRUE option. This helps tremendously in wait-time, at some potential cost to accuracy that you might want to be aware of. See the rlog documentation of DESeq2 for more details. The blind=TRUE option is also used, meaning that the entire dataset is used for dispersion estimation, rather than separating the samples by their experimental design class. In some instances this might imply an overestimate of dispersion, but is a conservative choice in the context of Shiny-phyloseq, because there is a potentially wide-range of experimental designs. For more complicated designs, or if dispersion is being wildly overestimated as a result of this choice, you may want to transform your data ahead of time, in batch.\nTo that end, and for your own guidance using Shiny-phyloseq, the following is an example of the regularized log transformation implemented in Shiny-phyloseq.\ndds = phyloseq_to_deseq2(physeq, ~ 1)\nrld &lt;- DESeq2::rlog(dds, blind = TRUE, fast = TRUE)\nrlogMat &lt;- GenomicRanges::assay(rld)\nphyseq1 = physeq\notu_table(physeq1) &lt;- otu_table(rlogMat, taxa_are_rows = TRUE)\nwhere physeq is an object containing the imported experimental data, represented in phyloseq format."
  },
  {
    "objectID": "panels/paneldoc/transform.html#clr-centered-log-ratio-transformation",
    "href": "panels/paneldoc/transform.html#clr-centered-log-ratio-transformation",
    "title": "1 ",
    "section": "",
    "text": "CLR transformation is championed in an article describing ALDEx2 for analyzing HTSeq count data.\nDefined in 1986 by Aitchison, a more-recent article (Egozcue 2003) defines and explains some details surrounding CLR.\nCLR can be defined as\nx / g(x)\nWhere x is our original vector of compositional values, and g(x) is the geometric mean of x.\nSo, to define a zero- and NA-tolerant function for calculating CLR:\nx = c(0, 0, 15, 3, 1, 0, 9)\ngm_mean = function(x, na.rm=TRUE){\n  # The geometric mean, with some error-protection bits.\n  exp(sum(log(x[x &gt; 0 & !is.na(x)]), na.rm=na.rm) / length(x))\n}\nclr = function(x, base=2){\n  x &lt;- log((x / gm_mean(x)), base)\n  x[!is.finite(x) | is.na(x)] &lt;- 0.0\n  return(x)\n}\nclr(x, 2)\n## [1]  0.0000  0.0000  2.6695  0.3476 -1.2374  0.0000  1.9325\nclr(x, exp(1))\n## [1]  0.0000  0.0000  1.8504  0.2409 -0.8577  0.0000  1.3395\nExample from aldex2 paper:\nx = c(10, 35, 50, 500)\nclr(x, 2)\n## [1] -2.4433 -0.6359 -0.1214  3.2006\nThe values reported in the ALDex2 article for their example were -2.44, -0.64, -0.12, 3.2. Which matches the rounded versions exactly,\nc(-2.44, -0.64, -0.12, 3.20) - round(clr(x, 2), 2)\n## [1] 0 0 0 0\nNote that they use a Bayesian method for handling zeroes in the ALDex2 artice. This approach assumes that the reason no reads were detected in some features was because of sampling variance. This is of course wrong in the microbial case. It is possible for microbes to be present in some samples, and truly absent in others.\nHere is what the example values look like if there was one or two zeroes present, in my formulation of the transformation.\nx = c(10, 35, 50, 500)\nclr(x, 2)\n## [1] -2.4433 -0.6359 -0.1214  3.2006\nx = c(10, 35, 50, 500, 0)\nclr(x, 2)\n## [1] -1.2902  0.5171  1.0317  4.3536  0.0000\nx = c(10, 35, 50, 500, 0, 0)\nclr(x, 2)\n## [1] -0.5215  1.2858  1.8004  5.1223  0.0000  0.0000\nThe presence of zeroes clearly makes a difference in the CLR result, as expected by how they are (somewhat crudely) managed in this approach. It does not change the ranking of features, but shifts them more positive (it is equivalent to replacing values &lt;=0 with a 1)."
  },
  {
    "objectID": "panels/paneldoc/palette.html",
    "href": "panels/paneldoc/palette.html",
    "title": "1 ",
    "section": "",
    "text": "1 \nNOTE: This is merely a documentation panel.\nThe following subsections define different options available in one or more of the Palette and Theme widgets that are located on other panels in Shiny-phyloseq.\nPlease inspect the documentation reproduced here, and especially the interactive Palette and Theme widgets’ provided on the left hand side. By changing their input, you can quickly see their influence on the example scatter plot on the right. The data itself is simply a small static example dataset, and the data has absolutely nothing to do with the data you have selected in the Data panel or have explored on other panels."
  },
  {
    "objectID": "panels/paneldoc/network.html",
    "href": "panels/paneldoc/network.html",
    "title": "1 Network Panel Details",
    "section": "",
    "text": "This panel provides an interface to phyloseq’s plot_net function. Calculation time depends a lot on the size of your data (number of OTUs/samples) and the distance method chosen.\n\n\n\n\nThis top section defines key aspects of the network structure.\n\nType - Toggle between a network with Samples or Taxa as nodes.\nMax D - Maximum Distance. Include an edge if two nodes have a smaller distance than this value.\nLayout - The network layout method. Many are supported. See igraph layout doc for details. Many of these include a randomness component, and the RNG Seed is a separate\nDistance - The distance method. This is a direct interface to phyloseq’s distance function\nDraw Max. - Maximum Render Distance. Distances larger than this (but less than Max D) affect the network layout structure, but are not drawn in the graphic. This widget is a slider in which the right-hand side should always match Max D. The Play button result in a network animation that scans across values for Draw Max., allowing you to quickly inspect the global connectivity as a function of threshold choice. In some cases you may want to modify Max D after reviewing this animation (or manually changing the slider yourself)\nTransform - This option is very important. It determines whether to use filtered-counts, or some transformation of the filtered count values. See the Transform panel for the definition of each available option.\n\n\n\n\nThese widgets correspond to aesthetic mappings on nodes (points).\n\nColor - The variable selected here is mapped to point/node color.\nShape - The variable selected here is mapped to point/node shape.\nLabel - allows labeling of nodes with text, according to one or more selected variables. If multiple non-NULL variables selected, their values are concatenated together in order as a single label for each node. The size and horisontal justification of labels can be adjusted in the Details section below.\n\n\n\n\n\nPalette, Size, and Opacity - refer to the way nodes (points) are drawn.\nRNG Seed is the random number generator seed used in some network layout methods (see above).\nLabel Sz and H-just - are size and horizontal-justification values that modify the node text labels, if any.\n\n\n\n\nFigure dimensions (inches), file format, and download button (DL)."
  },
  {
    "objectID": "panels/paneldoc/network.html#widget-sections",
    "href": "panels/paneldoc/network.html#widget-sections",
    "title": "1 Network Panel Details",
    "section": "",
    "text": "This top section defines key aspects of the network structure.\n\nType - Toggle between a network with Samples or Taxa as nodes.\nMax D - Maximum Distance. Include an edge if two nodes have a smaller distance than this value.\nLayout - The network layout method. Many are supported. See igraph layout doc for details. Many of these include a randomness component, and the RNG Seed is a separate\nDistance - The distance method. This is a direct interface to phyloseq’s distance function\nDraw Max. - Maximum Render Distance. Distances larger than this (but less than Max D) affect the network layout structure, but are not drawn in the graphic. This widget is a slider in which the right-hand side should always match Max D. The Play button result in a network animation that scans across values for Draw Max., allowing you to quickly inspect the global connectivity as a function of threshold choice. In some cases you may want to modify Max D after reviewing this animation (or manually changing the slider yourself)\nTransform - This option is very important. It determines whether to use filtered-counts, or some transformation of the filtered count values. See the Transform panel for the definition of each available option.\n\n\n\n\nThese widgets correspond to aesthetic mappings on nodes (points).\n\nColor - The variable selected here is mapped to point/node color.\nShape - The variable selected here is mapped to point/node shape.\nLabel - allows labeling of nodes with text, according to one or more selected variables. If multiple non-NULL variables selected, their values are concatenated together in order as a single label for each node. The size and horisontal justification of labels can be adjusted in the Details section below.\n\n\n\n\n\nPalette, Size, and Opacity - refer to the way nodes (points) are drawn.\nRNG Seed is the random number generator seed used in some network layout methods (see above).\nLabel Sz and H-just - are size and horizontal-justification values that modify the node text labels, if any.\n\n\n\n\nFigure dimensions (inches), file format, and download button (DL)."
  },
  {
    "objectID": "panels/paneldoc/provenance.html",
    "href": "panels/paneldoc/provenance.html",
    "title": "1 Provenance Tracking Overview",
    "section": "",
    "text": "1 Provenance Tracking Overview\nYou can download a compressed file containing the complete code and data necessary to completely reproduce the steps that led to your graphical results during your session. After successful download/transmission, this stored code and data is deleted from the server-side file system.\n\n1.0.1 Archive\n\nCompression Type - The compression format that will be used to store your provenance archive’s code and data.\nD.L. - The download button. Press this and you will download the provenance archive.\n\n\n\n1.0.2 Code Preview\n\n# Events - This determines the amount of code (in number of Shiny events) that are shown for convenience in the main panel area on the right. This does not affect the contents of the provenance archive that you will download.\nPreview Code - This tells Shiny-phyloseq to show/update the code shown on the right-hand side.\n\n\n\n1.0.3 Details\nThe R code shown on the right-hand side of this panel is simply the last few events logged by Shiny-phyloseq and shown for convenient inspection only. The complete code and data are contained within the zipped archive file that is downloaded when you click the button.\nIf you click the button additional times, the code and data is re-processed, and a new archive is produced that is caught up to your last activities. This means that you can “archive as you go”."
  },
  {
    "objectID": "panels/paneldoc/scatter.html",
    "href": "panels/paneldoc/scatter.html",
    "title": "1 Scatter Panel Details",
    "section": "",
    "text": "1 Scatter Panel Details\nThis panel provides an interface to phyloseq’s psmelt function. In this case, the result of melting the abundance data and its covariates/annotations is rendered as a scatter plot.\n\n1.0.1 Aesthetic Mapping\nLike the Bar panel, this panel is intended as a tool to explore the abundance values directly. What you see in the plot is a result of your description of how to map aspects of the data to the plot.\n\nX-Axis - The variable selected here is mapped to the horizontal (“X”) axis. The default selection is \"Sample\", which means every sample gets a separate discrete position on the horizontal axis.\nY-Axis - The variable selected here is mapped to the vertical (“Y”) axis. By default, the “Y” axis is mapped to the abundance value indicated by the Data widget at the bottom of this subsection.\nColor - The variable selected here is mapped to point color.\nShape - The variable selected here is mapped to point shape. For both Color and Shape, take care that selected discrete variables do not surpass the number of available aesthetic categories (e.g. more categories in data than you have color shades or shape types).\nFacet Row - This is an interface to ggplot2’s facet_grid function. Faceting is a means of splitting the data into separate panels according to one or more variables in the data. This can have many advantages, especially to alleviate overplotting, and to clarify key comparisons. In this case, the Facet Row widget provides available variables that will be mapped to panel-rows in the resulting grid of facets panels. You can select more than one variable. You should delete/unselect NULL when selecting facets.\nFacet Col - This is the same as Facet Row above, but this widget controls the variables that will arrange the data into panel columns.\nLabel - A variable to map to point label. The text at each point will reflect the value of the chosen variable. The small numeric widgets to the right adjust label size (Lab Sz) and vertical justification (V-Just).\nTransform - This option is very important. It determines whether to use filtered-counts, or some transformation of the filtered count values. See the Transform panel for the definition of each available option.\n\n\n\n1.0.2 Details\nPalette, Theme, Size, and Opacity - refer to the way points are drawn.\n\nPalette - Refers to color palette. Only applicable if you have selected a Color variable in the Aesthetic Mapping section. Explore the Palette panel within Shiny-phyloseq, or more details about color palettes at ColorBrewer.\nTheme - For the most part these refer to ggplot2 themes, which generally encompass stylistic graphical features, such as axis line types, axis label fonts and spacing, background color, etc.\nSize - The size of each data point.\nOpacity - Adjusts the transparency of points when less than 1. [0, 1] scale.\n\n\n\n1.0.3 Dimensions and Downloads\nFigure dimensions (in inches), file format, and download button (DL)."
  },
  {
    "objectID": "panels/paneldoc/filter.html",
    "href": "panels/paneldoc/filter.html",
    "title": "1 Filter Panel Details",
    "section": "",
    "text": "1 Filter Panel Details\nThis panel is a limited but hopefully useful interface to phyloseq’s Preprocessing infrastructure. It is intended for some of the simpler filtering tasks supported by phyloseq. For more advanced filtering consider manipulating your data via R/phyloseq directly, prior to uploading it to the Shiny-phyloseq app. See the data tab for further info about importing/saving/uploading data.\nNo filter calculations are performed until the Execute Filter button is clicked\nMost downstream analyses will use the data that results from the most-recent click of this panel’s button.\nFiltering is always performed in the order displayed in the sidebar panel (top to bottom, left to right). Steps with zero/null parameter values are skipped.\nIn summary\n\n\nThe data is subsetted by specific taxonomic ranks or sample covariates, if any such subsetting arguments are provided.\n\n\nSecond, minimum thresholds for library size or cross-dataset taxa-counts are evaluated and the data filtered accordingly.\n\n\nThird, an interface for genefilter’s kOverA filtering is evaluated on the result of any other filtering up to this.\n\n\nAfter clicking the button to execute the filtering parameters, a set of histograms of taxa and library count totals are displayed for comparing raw (original) and filtered results.\nIn addition, the Available Components widget allows you to select form available data components, and render an interactive table of the selected component. This is identical to the components-table display on the data panel, but in this case it displays the filtered data.\n\n1.0.1 Subset sections\nThis section of the sidebar panel is for subsetting the microbiome data through dynamic pairs of variable selection widgets. The first/left widget allows you to select a variable in the dataset (a sample variable or taxonomic rank), and the second widget allows you to select one or more classes of the just-selected variable. Upon execution, only the samples (or taxa) with the selected classes (or taxa) will remain in the dataset.\n\nSubset Taxa Left. Select a particular taxonomic rank by which to filter (if available). Right. Select one or more taxa within this rank that you want to keep in the filtered data. The rest will be discarded.\nSubset Samples - Left. Select a sample variable with categories you want to select amongst. Right. Select Classes within the selected variable that you want to keep. The rest will be discarded. Currently only categorical variables are supported for sample subsetting.\n\n\n\n1.0.2 Total Sums Filtering\nAfter any subsetting, total sums filtering is applied. The Sample Min. and Taxa Min. widgets specify minimum thresholds. Only samples or taxa that have count totals above the displayed values will be retained in the filtered data after clicking the Execute Filter button.\n\n\n1.0.3 kOverA Taxa Filtering\nThis is a useful and commonly-used heuristic. It is applied last, after other filtering steps have been applied to the data.\n\nA – The count value minmum threshold\nk – The number of samples in which a taxa exceeded A\n\nAn taxa is retained in the dataset iff it exceeds the value A in at least k samples.\nIn phyloseq code, this filtering step has the form\nflist = filterfun(kOverA(k, A))\nphyseq &lt;- filter_taxa(ps0, flist, prune=TRUE)\nwhere physeq and ps0 are the filtered and unfiltered data, respectively. filterfun and kOverA are from the genefilter package."
  },
  {
    "objectID": "panels/paneldoc/tree.html",
    "href": "panels/paneldoc/tree.html",
    "title": "1 Tree Panel Details",
    "section": "",
    "text": "1 Tree Panel Details\nThis panel provides an interface to phyloseq’s plot_tree function.\n\n1.0.1 Structure\nThis top section defines key aspects of the tree layout structure.\n\nPoints - Whether to include points next to tips in the tree, or just draw the “naked” tree.\nJustify - Whether to justify points, or pile them next to tree tips (only matters if you chose points, above).\nLadderize - A branch rotating heuristic to make the tree easier to read and interpret.\nCoordinates - Whether to use radial or cartesian coordinates to render tree.\nMin - The minimum count/value threshold that determines whether a point is displayed on the graphic.\nMargin - The additional margin added to facilitate dodged points on the graphic.\n\n\n\n1.0.2 Aesthetic Mapping\n\nColor - A variable to map to a points color.\nShape - A variable to map to a points shape.\nLabels - Tip labels, next to tree tips or to the right of points.\n\n\n\n1.0.3 Details\n\nPalette - Color Palette.\nSize - Point/label size\nTheme - Graphic (ggplot2) theme.\n\n\n\n1.0.4 Dimensions and Downloads\nFigure dimensions (in inches), file format, and download button (DL)."
  },
  {
    "objectID": "panels/paneldoc/heatmap.html",
    "href": "panels/paneldoc/heatmap.html",
    "title": "1 Heatmap Panel Details",
    "section": "",
    "text": "1 Heatmap Panel Details\nThis panel provides an interface to phyloseq’s plot_heatmap function.\n\n1.0.1 Structure\nThis top section defines key aspects of the ordination calculation that determines axis ordering. This includes the distance used in the ordination (if applicable), and the method used to decompose that distance into axes.\n\nMethod - The Ordination Method to use. This is an interface to phyloseq’s ordinate function.\nDistance - The distance method. This is a direct interface to phyloseq’s distance function.\nTransform - This option is very important. It determines whether to use filtered-counts, or some transformation of the filtered count values in both the ordination and in the color-scale transformation shown in the graphic. See the Transform panel for the definition of each available option.\n\n\n\n1.0.2 Labels\nThis provides you with the option of selecting an alternative label from among sample variables and taxonomic ranks.\n\nSamples - Choose from among sample variables, if available, that will replace the index name for each sample.\nTaxa - Choose from among taxonomic ranks, if available, that will replace the index name for each OTU.\n\n\n\n1.0.3 Manual Ordering\nThis provides you with the option of selecting an alternative ordering of one or both indices based on available variables.\n\nSamples - Choose from among sample variables, if available, that will be used to re-order the sample columns.\nTaxa - Choose from among taxonomic ranks, if available, that will be used to re-order the OTU rows.\n\n\n\n1.0.4 Color Scale\nThese widgets define the Low, High, and Missing-Value colors in the heatmap. Standard R color names and hexadecimal colors are supported.\n\n\n1.0.5 Dimensions and Downloads\nFigure dimensions (in inches), file format, and download button (DL)."
  },
  {
    "objectID": "panels/paneldoc/Transform.html",
    "href": "panels/paneldoc/Transform.html",
    "title": "1 ",
    "section": "",
    "text": "NOTE: This is merely a documentation panel.\nThe following subsections define different options available in one or more of the Transform widgets that are located on other panels in Shiny-phyloseq.\n\nImplication - When one of the following options is selected, it implies that the transformed values are being used for the analysis/graphics of the currently-active panel that you are looking at.\nEfficiency - The choice of transformation in one widget does not affect the Transform widget selection in other panels – so you can freely try different transformations in one panel without worrying that you are inadvertantly changing the result you’ve already seen in some other panel. However, the transform computation for a given transformation option is always the same so Shiny-phyloseq will only need to compute the transformation the first time that you select it in any panel. This notion is reset if you change the dataset selection on the Data panel, or if you change the filtering options in the Filter panel.\n\n\n\nThe Counts option is the default, and simply means that the filtered count values are used in the respective analysis of the currently active panel. No calculation is performed or required. If you skipped the Filter panel, then this option implies that the original unfiltered counts values are being used.\n\n\n\nThis option means that the simple proportion values are being used. All entries in the OTU table are divided by their respective library size. In an OTU-by-Sample table, this means dividing every value by its column’s sum. This is equivalent in phyloseq to the following\ntransform_sample_counts(physeq, function(x) x/sum(x))\n\n\n\nThe the DESeq2 package provides two forms of variance-stabilizing transformations. Both the DESeq2 beginner’s vignette and the DESeq2 main vignette, Data transformations and visualization section, provide helpful theoretical information about these transformations, and why they might be useful for sample-wise exploratory data analysis.\nThe RLog option is one of our favorites, and implies the results of a Regularized Transformation. Because this is an interactive tool and these dispersion estimates can sometimes take a long time to calculate, we have implemented this option with the fast = TRUE option. This helps tremendously in wait-time, at some potential cost to accuracy that you might want to be aware of. See the rlog documentation of DESeq2 for more details. The blind=TRUE option is also used, meaning that the entire dataset is used for dispersion estimation, rather than separating the samples by their experimental design class. In some instances this might imply an overestimate of dispersion, but is a conservative choice in the context of Shiny-phyloseq, because there is a potentially wide-range of experimental designs. For more complicated designs, or if dispersion is being wildly overestimated as a result of this choice, you may want to transform your data ahead of time, in batch.\nTo that end, and for your own guidance using Shiny-phyloseq, the following is an example of the regularized log transformation implemented in Shiny-phyloseq.\ndds = phyloseq_to_deseq2(physeq, ~ 1)\nrld &lt;- DESeq2::rlog(dds, blind = TRUE, fast = TRUE)\nrlogMat &lt;- GenomicRanges::assay(rld)\nphyseq1 = physeq\notu_table(physeq1) &lt;- otu_table(rlogMat, taxa_are_rows = TRUE)\nwhere physeq is an object containing the imported experimental data, represented in phyloseq format.\n\n\n\nCLR transformation is championed in an article describing ALDEx2 for analyzing HTSeq count data.\nDefined in 1986 by Aitchison, a more-recent article (Egozcue 2003) defines and explains some details surrounding CLR.\nCLR can be defined as\nx / g(x)\nWhere x is our original vector of compositional values, and g(x) is the geometric mean of x.\nSo, to define a zero- and NA-tolerant function for calculating CLR:\nx = c(0, 0, 15, 3, 1, 0, 9)\ngm_mean = function(x, na.rm=TRUE){\n  # The geometric mean, with some error-protection bits.\n  exp(sum(log(x[x &gt; 0 & !is.na(x)]), na.rm=na.rm) / length(x))\n}\nclr = function(x, base=2){\n  x &lt;- log((x / gm_mean(x)), base)\n  x[!is.finite(x) | is.na(x)] &lt;- 0.0\n  return(x)\n}\nclr(x, 2)\n## [1]  0.0000  0.0000  2.6695  0.3476 -1.2374  0.0000  1.9325\nclr(x, exp(1))\n## [1]  0.0000  0.0000  1.8504  0.2409 -0.8577  0.0000  1.3395\nExample from aldex2 paper:\nx = c(10, 35, 50, 500)\nclr(x, 2)\n## [1] -2.4433 -0.6359 -0.1214  3.2006\nThe values reported in the ALDex2 article for their example were -2.44, -0.64, -0.12, 3.2. Which matches the rounded versions exactly,\nc(-2.44, -0.64, -0.12, 3.20) - round(clr(x, 2), 2)\n## [1] 0 0 0 0\nNote that they use a Bayesian method for handling zeroes in the ALDex2 artice. This approach assumes that the reason no reads were detected in some features was because of sampling variance. This is of course wrong in the microbial case. It is possible for microbes to be present in some samples, and truly absent in others.\nHere is what the example values look like if there was one or two zeroes present, in my formulation of the transformation.\nx = c(10, 35, 50, 500)\nclr(x, 2)\n## [1] -2.4433 -0.6359 -0.1214  3.2006\nx = c(10, 35, 50, 500, 0)\nclr(x, 2)\n## [1] -1.2902  0.5171  1.0317  4.3536  0.0000\nx = c(10, 35, 50, 500, 0, 0)\nclr(x, 2)\n## [1] -0.5215  1.2858  1.8004  5.1223  0.0000  0.0000\nThe presence of zeroes clearly makes a difference in the CLR result, as expected by how they are (somewhat crudely) managed in this approach. It does not change the ranking of features, but shifts them more positive (it is equivalent to replacing values &lt;=0 with a 1)."
  },
  {
    "objectID": "panels/paneldoc/Transform.html#counts",
    "href": "panels/paneldoc/Transform.html#counts",
    "title": "1 ",
    "section": "",
    "text": "The Counts option is the default, and simply means that the filtered count values are used in the respective analysis of the currently active panel. No calculation is performed or required. If you skipped the Filter panel, then this option implies that the original unfiltered counts values are being used."
  },
  {
    "objectID": "panels/paneldoc/Transform.html#prop",
    "href": "panels/paneldoc/Transform.html#prop",
    "title": "1 ",
    "section": "",
    "text": "This option means that the simple proportion values are being used. All entries in the OTU table are divided by their respective library size. In an OTU-by-Sample table, this means dividing every value by its column’s sum. This is equivalent in phyloseq to the following\ntransform_sample_counts(physeq, function(x) x/sum(x))"
  },
  {
    "objectID": "panels/paneldoc/Transform.html#rlog---regularized-log",
    "href": "panels/paneldoc/Transform.html#rlog---regularized-log",
    "title": "1 ",
    "section": "",
    "text": "The the DESeq2 package provides two forms of variance-stabilizing transformations. Both the DESeq2 beginner’s vignette and the DESeq2 main vignette, Data transformations and visualization section, provide helpful theoretical information about these transformations, and why they might be useful for sample-wise exploratory data analysis.\nThe RLog option is one of our favorites, and implies the results of a Regularized Transformation. Because this is an interactive tool and these dispersion estimates can sometimes take a long time to calculate, we have implemented this option with the fast = TRUE option. This helps tremendously in wait-time, at some potential cost to accuracy that you might want to be aware of. See the rlog documentation of DESeq2 for more details. The blind=TRUE option is also used, meaning that the entire dataset is used for dispersion estimation, rather than separating the samples by their experimental design class. In some instances this might imply an overestimate of dispersion, but is a conservative choice in the context of Shiny-phyloseq, because there is a potentially wide-range of experimental designs. For more complicated designs, or if dispersion is being wildly overestimated as a result of this choice, you may want to transform your data ahead of time, in batch.\nTo that end, and for your own guidance using Shiny-phyloseq, the following is an example of the regularized log transformation implemented in Shiny-phyloseq.\ndds = phyloseq_to_deseq2(physeq, ~ 1)\nrld &lt;- DESeq2::rlog(dds, blind = TRUE, fast = TRUE)\nrlogMat &lt;- GenomicRanges::assay(rld)\nphyseq1 = physeq\notu_table(physeq1) &lt;- otu_table(rlogMat, taxa_are_rows = TRUE)\nwhere physeq is an object containing the imported experimental data, represented in phyloseq format."
  },
  {
    "objectID": "panels/paneldoc/Transform.html#clr-centered-log-ratio-transformation",
    "href": "panels/paneldoc/Transform.html#clr-centered-log-ratio-transformation",
    "title": "1 ",
    "section": "",
    "text": "CLR transformation is championed in an article describing ALDEx2 for analyzing HTSeq count data.\nDefined in 1986 by Aitchison, a more-recent article (Egozcue 2003) defines and explains some details surrounding CLR.\nCLR can be defined as\nx / g(x)\nWhere x is our original vector of compositional values, and g(x) is the geometric mean of x.\nSo, to define a zero- and NA-tolerant function for calculating CLR:\nx = c(0, 0, 15, 3, 1, 0, 9)\ngm_mean = function(x, na.rm=TRUE){\n  # The geometric mean, with some error-protection bits.\n  exp(sum(log(x[x &gt; 0 & !is.na(x)]), na.rm=na.rm) / length(x))\n}\nclr = function(x, base=2){\n  x &lt;- log((x / gm_mean(x)), base)\n  x[!is.finite(x) | is.na(x)] &lt;- 0.0\n  return(x)\n}\nclr(x, 2)\n## [1]  0.0000  0.0000  2.6695  0.3476 -1.2374  0.0000  1.9325\nclr(x, exp(1))\n## [1]  0.0000  0.0000  1.8504  0.2409 -0.8577  0.0000  1.3395\nExample from aldex2 paper:\nx = c(10, 35, 50, 500)\nclr(x, 2)\n## [1] -2.4433 -0.6359 -0.1214  3.2006\nThe values reported in the ALDex2 article for their example were -2.44, -0.64, -0.12, 3.2. Which matches the rounded versions exactly,\nc(-2.44, -0.64, -0.12, 3.20) - round(clr(x, 2), 2)\n## [1] 0 0 0 0\nNote that they use a Bayesian method for handling zeroes in the ALDex2 artice. This approach assumes that the reason no reads were detected in some features was because of sampling variance. This is of course wrong in the microbial case. It is possible for microbes to be present in some samples, and truly absent in others.\nHere is what the example values look like if there was one or two zeroes present, in my formulation of the transformation.\nx = c(10, 35, 50, 500)\nclr(x, 2)\n## [1] -2.4433 -0.6359 -0.1214  3.2006\nx = c(10, 35, 50, 500, 0)\nclr(x, 2)\n## [1] -1.2902  0.5171  1.0317  4.3536  0.0000\nx = c(10, 35, 50, 500, 0, 0)\nclr(x, 2)\n## [1] -0.5215  1.2858  1.8004  5.1223  0.0000  0.0000\nThe presence of zeroes clearly makes a difference in the CLR result, as expected by how they are (somewhat crudely) managed in this approach. It does not change the ranking of features, but shifts them more positive (it is equivalent to replacing values &lt;=0 with a 1)."
  },
  {
    "objectID": "panels/paneldoc/bar.html",
    "href": "panels/paneldoc/bar.html",
    "title": "1 Bar Panel Details",
    "section": "",
    "text": "This panel provides an interface to phyloseq’s plot_bar function.\n\n\n\n(Re)Build Graphic button - no plot will be built, or rebuilt, until you click the (Re)Build Graphic button at the top of the sidebar.\n\n\n\nLike the Scatter panel, this panel is intended as a tool to explore the abundance values directly. What you see in the plot is a result of your description of how to map aspects of the data to the plot.\n\nX-Axis - The variable selected here is mapped to the horizontal (“X”) axis. The default selection is \"Sample\", which means every sample gets a separate discrete position on the horizontal axis. The “Y” axis is always mapped to the abundance value indicated by the Data widget at the bottom of this subsection.\nColor - The variable selected here is mapped to the fill color of bars. Take care that selected discrete variables do not surpass the number of available aesthetic categories (e.g. more categories in data than you have color shades).\nFacet Row - This is an interface to ggplot2’s facet_grid function. Faceting is a means of splitting the data into separate panels according to one or more variables in the data. This can have many advantages, especially to alleviate overplotting, and to clarify key comparisons. In this case, the Facet Row widget provides available variables that will be mapped to panel-rows in the resulting grid of facets panels. You can select more than one variable. You should delete/unselect NULL when selecting facets.\nFacet Col - This is the same as Facet Row above, but this widget controls the variables that will arrange the data into panel columns.\nData - Whether to use filtered Counts or a transformation. Proportion is a simple, provided transformation.\n\n\n\n\nPalette, Theme, Size, and Opacity - refer to the way points are drawn.\n\nPalette - Refers to color palette. Only applicable if you have selected a Color variable in the Aesthetic Mapping section. Explore the Palette panel within Shiny-phyloseq, or more details about color palettes at ColorBrewer.\nTheme - For the most part these refer to ggplot2 themes, which generally encompass stylistic graphical features, such as axis line types, axis label fonts and spacing, background color, etc.\nAngle - This refers to the label angle for the horizontal (“X”) axis.\n\n\n\n\nFigure dimensions (in inches), file format, and download button (DL)."
  },
  {
    "objectID": "panels/paneldoc/bar.html#widget-sections",
    "href": "panels/paneldoc/bar.html#widget-sections",
    "title": "1 Bar Panel Details",
    "section": "",
    "text": "(Re)Build Graphic button - no plot will be built, or rebuilt, until you click the (Re)Build Graphic button at the top of the sidebar.\n\n\n\nLike the Scatter panel, this panel is intended as a tool to explore the abundance values directly. What you see in the plot is a result of your description of how to map aspects of the data to the plot.\n\nX-Axis - The variable selected here is mapped to the horizontal (“X”) axis. The default selection is \"Sample\", which means every sample gets a separate discrete position on the horizontal axis. The “Y” axis is always mapped to the abundance value indicated by the Data widget at the bottom of this subsection.\nColor - The variable selected here is mapped to the fill color of bars. Take care that selected discrete variables do not surpass the number of available aesthetic categories (e.g. more categories in data than you have color shades).\nFacet Row - This is an interface to ggplot2’s facet_grid function. Faceting is a means of splitting the data into separate panels according to one or more variables in the data. This can have many advantages, especially to alleviate overplotting, and to clarify key comparisons. In this case, the Facet Row widget provides available variables that will be mapped to panel-rows in the resulting grid of facets panels. You can select more than one variable. You should delete/unselect NULL when selecting facets.\nFacet Col - This is the same as Facet Row above, but this widget controls the variables that will arrange the data into panel columns.\nData - Whether to use filtered Counts or a transformation. Proportion is a simple, provided transformation.\n\n\n\n\nPalette, Theme, Size, and Opacity - refer to the way points are drawn.\n\nPalette - Refers to color palette. Only applicable if you have selected a Color variable in the Aesthetic Mapping section. Explore the Palette panel within Shiny-phyloseq, or more details about color palettes at ColorBrewer.\nTheme - For the most part these refer to ggplot2 themes, which generally encompass stylistic graphical features, such as axis line types, axis label fonts and spacing, background color, etc.\nAngle - This refers to the label angle for the horizontal (“X”) axis.\n\n\n\n\nFigure dimensions (in inches), file format, and download button (DL)."
  },
  {
    "objectID": "panels/paneldoc/data.html",
    "href": "panels/paneldoc/data.html",
    "title": "1 Shiny-phyloseq Overview",
    "section": "",
    "text": "1 Shiny-phyloseq Overview\nShiny-phyloseq is a Shiny-based graphical user interface (GUI) to the phyloseq package for R, hosted by Bioconductor.\nShiny-phyloseq is intended for the following purposes (among)\n\n\nRapid, reproducible, interactive exploration of microbiome data\n\n\nIntroduction to some of the functionality in the phyloseq package\n\n\nAn accessible tool for education of both microbiome data and its analysis\n\n\nEasy exchange and demonstration of microbiome data analyses in R\n\n\nShiny-phyloseq is an open-source project with a modular design based on the much more general Shiny project for exposing R tools with custom web interfaces. As a result it is easy to customize — for instance by the adding new dataset(s) to the default selection list, adjusting default parameters to reflect experiment-specific choices, or even by adding/subtracting panels with new or modified functionality.\nShiny is a fully-compliant CRAN-hosted R package that provides an Application Program Interface (API) for building interactive web applications that are based on Twitter’s Bootstrap front-end toolkit. Shiny-phyloseq is almost entirely R code, but, like any Shiny app, can be further customized/extended using HTML, CSS, and JavaScript. Shiny-phyloseq is fully cross-platform and will launch locally from any R environment (Console R, Rgui, RStudio, etc.), but can also be “hosted” by a web-server — this latter-case requiring only a web browser. Shiny-phyloseq leverages Shiny’s reactive programming framework to compartmentalize and cache expensive computational steps so that they are not re-computed unnecessarily during an interactive session.\n\n1.0.1 Typical Workflow\nA typical workflow in Shiny-phyloseq begins with data upload and selection, followed by optional filtering of OTUs or samples. A number of exploratory data analysis methods are available in separate panels, including alpha diversity estimates, multivariate ordination methods, and network and heatmap plots. Some of these methods depend on provided data transformations (e.g. regularized-log) or ecological distances (e.g. weighted-UniFrac, Bray-Curtis), which can be selected from a sidebar panel of parameter-input widgets placed next to each graphic on each panel. Graphics can be downloaded in user-specified format by clicking the download button at the bottom of each sidebar panel. Lastly, a user can download a compressed file containing the complete code and data necessary to completely reproduce the steps that led to their graphical result.\nThe Shiny-phyloseq interface is organized into panels from left to right, beginning with data selection (the first to appear), filtering/curation, graphic-specific panels, and ending with provenance-tracking. User input widgets are consolidated in a lefthand sidebar of each panel. The Select Dataset panel (the current panel) begins each session. Pre-loaded datasets are available by default, and users can optionally specify public datasets hosted on QIIME-DB, or upload private dataset files that are in the biom file format, or even batch upload of binary .RData that has been previously imported into phyloseq’s data class in R. See below for further details about data input and selection.\nThe Filter panel supports some common aspects of user-defined data filtering. Shiny-phyloseq provides a separate panel for each each major graphic function in phyloseq, including alpha-diversity (Richness), sample- or OTU-networks (Network and d3Network), bar plot (Bar), heat map (Heatmap), phylogenetic tree (Tree), ordination (Ordination), and scatter plot (Scatter). All panels support custom figure dimensions, usually at the bottom of the sidebar panel. The ggplot2-based graphics further support custom color palettes and file format for download.\nAmong many new features not previously available in phyloseq, Shiny-phyloseq also records and makes available your sequence of input choices and subsequent graphical results during your session, allowing you to archive, share, and reproduce the sequence of steps you used to arrive at your result – without writing any new code. This can be achived at any waypoint or end of your analysis in other panels by clicking on the Provenance panel, then clicking the Render Code button (which initiates the archiving routine and data packaging). Then click the download button, and a compressed file will be downloaded that contains the data and code.\n\n\n1.0.2 Machine Requirements\nIf you are merely pointing your web browser at a remote server that is hosting Shiny-phyloseq, then your machine performance requirements are much less. Most modern desktops/laptops will do fine. If you are launching your own locally-hosted session, then you will need to install some things and your system requirements are greater because your own computer will be performing the “back end” computations as well as rendering the graphics and user interface. See the Shiny-phyloseq installation page for more details about requirements, and detailed instructions for installing and launching Shiny-phyloseq locally.\n\n\n1.0.3 Tips for Using Shiny-phyloseq\n\nFiltering. Most downstream analysis panels use the data that results from the latest filtering button-click as input data. If the filtering step is skipped, the original dataset is used. For most microbiome datasets filtering is a good idea.\nColors and Formats. Most panels provide optional color palette selections defined by Color Brewer, and all panels provide manual adjustment of the graphic’s width and height, which controls both the dimensions of the in-browser graphic as well as downloadable graphic via a Download button. For most panels (except D3 graphics) you can choose from a large number of standard vector and raster graphics formats.\nErrors. All panels produce some sort of plot. Most errors are “caught” silently without crashing the server-side R session, but instead result in a generic graphic. You should immediately consider why your data and parameter choices might have caused a logical error. In some cases the generic graphic will include an informative label that might help you find a solution, but not always. When in doubt, turn parameters back to their default “vanilla” values, and start again.\nLarge Data and Slow Computations. If you are analyzing a very large dataset with so many microbiome samples and/or OTUs that basic calculations run slowly in “command-line” phyloseq, then there is no reason to expect that a GUI interactive approach will perform any better… unless you have hosted Shiny-phyloseq on a much-improved server from your original sluggish experience. Your happiness of the speed and responsiveness of Shiny-phyloseq depends a lot upon what machine is running the “back end”, and how large your dataset is. Common datasets with 1000 or fewer OTUs after filtering, and a 100 or fewer samples, should perform well when hosted on zippy computers with sufficient (&gt;4GB) RAM. There are no clear boundaries as it depends mostly on dataset size. Computers with &lt;=2GB RAM are probably too old to expect satisfying responsiveness in this application.\n\n\n\n1.0.4 Customizing Shiny-phyloseq\nIf you’ve downloaded the Shiny-phyloseq code and intend to tinker with it, a good place to start might be to modify core/default-parameters.R and change certain default settings. The default filtering parameters are especially ripe for tuning to a specific dataset that you intend to present.\nIt is also possible to modify any aspect of Shiny-phyloseq, as the complete source code is available not only for Shiny-phyloseq, but also the Shiny package itself. For example, you can borrow one or more panel modules of the Shiny-phyloseq codebase and embed them as a Shiny widget within an HTML slideshow generated from the R markdown.\n\n\n1.0.5 Posting Issues\nShiny-phyloseq is openly developed on GitHub. This openness includes a so-called “Issues Tracker” where bug reports, feature requests, documentation revisions, and suggestions for improvement can be posted by anyone with a GitHub account, and visible/Google-searchable by all.\nThe Shiny-phyloseq issue tracker can be found at this link:\nhttps://github.com/joey711/shiny-phyloseq/issues\n\n\n1.0.6 Contributing Code\nIf you’re a programmer with skil in R, JavaScript, or CSS, you may be able to contribute to Shiny-phyloseq. Contributions are preferred through the standard git/GitHub Pull Request system. Outstanding pull requests appear here:\nhttps://github.com/joey711/shiny-phyloseq/pulls\nbut in most cases you will “Fork and Pull” through your own account and locally originated changes.\n\n\n1.0.7 Data Privacy\nFor those worried about maintaining data privacy, it is important to note that for locally-launched/served sessions the file is not actually being transmitted anywhere outside your local machine. The terms “Upload” and “Download” are referring to the data transmission between your browser front-end and your server back-end (as opposed to pointing your browser to an externally-hosted instance of Shiny-phyloseq, in which case you are uploading and downloading in the usual sense). We have not included any infrastructure in Shiny-phyloseq to archive uploaded data, and any storage of such data is intentionally ephemeral, and only as necessary for the proper functioning of the application. Any deviation from this is by accident, or by a modification of Shiny-phyloseq that is beyond our intent or permission. By design, the Provenance panel provides a means of downloading the complete code and data necessary to completely reproduce the set of figures created during a user session. After successful download/transmission, this stored code and data is deleted from the server-side file system.\n\n\n1.0.8 Acknowledgements\nBig thanks to Shiny web apps team and Rstudio in general.\n\n\n\n\n2 Data Input Panel Details\nThis current panel is a limited but hopefully useful interface to phyloseq’s Data Import Infrastructure.\nFiltering can be done on the next panel to the right after the data has been uploaded and selected.\n\n2.0.1 Select Dataset\nThis is the first and most-critical selection widget in Shiny-phyloseq. It determines which dataset to use as the starting point of an analysis. Changing or resetting the name displayed in this widget to a new value will cause a cascading reset of most other widgets in the rest of the app, because many refer to annotation elements that are specific to the selected dataset. Only one dataset can be selected at a time. The list of available datasets shown in this widget will update instantly after any new datasets are loaded. The most recently provided dataset is selected by default, therefore uploading a new dataset will automatically make it the selected “live” dataset displayed in every subsequent panel and graphic.\nThere are many default datasets included in the app and available for selection.\n\nclosed_1457_uparse - Kostic et al Genomic analysis identifies association of Fusobacterium with colorectal carcinoma\n\n\nGenome research 22(2) 292-298. In this case closed-reference OTU-clustering of the publicly available 16S rRNA sequences has been re-performed using UPARSE and each OTU has been taxonomically classified by its match in the GreenGenes reference database ver13_8.\n\n\nstudy_1457_kostic - This is the same experimental data as above, but the original publicly available counts corresponding to the default OTU-clustering and classification procedure of the QIIME-DB\nGlobalPatterns - Caporaso et al. (2011). Global patterns of 16S rRNA diversity at a depth of millions of sequences per sample. PNAS 108 4516-4522. PMCID: PMC3063599\nenterotype - Arumugam et al. (2011). Enterotypes of the human gut microbiome. Nature, 473(7346), 174-180. OTU-clustered data was downloaded from this publicly-accessible link\nesophagus - Pei et al (2004). Bacterial biota in the human distal esophagus PNAS 101(12), 4250-4255. This data is derived from mothur-processed files. The sequence data can be downloaded from a zip-file, along with additional description at this link URL.\n\n\n\n2.0.2 Upload Biom-Format File\nClick the Choose Files button to upload a biom-format file from your local system. Behind the scenes it will be processed into a native phyloseq data structure in R. If successfully processed, its name will be made available as the selected dataset in the Select Dataset list, as described above.\n\n\n2.0.3 Upload “.RData” File\nThis is the same concept as for the previous biom-file upload, except in this case the file is a binary .RData format that contains one or more datasets that are already in native phyloseq data structure. This is useful for the following scenarios\n\nYou already imported your data in R using a relevant import_* function in phyloseq, either because you already use phyloseq or because you needed to make some subtle modifications prior to Shiny-phyloseq\nYou want to “batch” upload many datasets at once\n\n\n\n2.0.4 Upload Tree File\nThis is a special file-upload option that will attempt to read/process a Newick or Nexus format phylogenetic tree. If successful, it will attempt to add (if missing) or replace (if present) the phylogenetic tree component of the currently-selected dataset. It is essential that the tip labels encoded in the tree file match exactly their respective OTUs in the currently-selected dataset. Tree file processing will be conducted using phyloseq’s read_tree function, and then merged with the currently-selected dataset using merge_phyloseq. See phyloseq’s import_data page for further details.\nNote that the other upload/load widgets in this data selection panel add new whole datasets for selection, whereas this upload will result in adding/replacing the tree, provided that the initial tree file processing is successful."
  }
]