---
title: "Phyloseq Dashboard"
format: 
  html: 
    embed-resources: true
    theme: lux
    toc: true
    number-sections: true
editor: visual
filters: 
  - lightbox
---

```{r diretories, include=FALSE}
setwd("~/Documents/Code/github.com/dashboard-rhizosphere/quarto_dashboard")
```

```{r install, include=FALSE}
# Check if BiocManager is installed and install it if it's missing
if (!requireNamespace("BiocManager", quietly = TRUE)) {
  install.packages("BiocManager")
}

################################################################################
# Install basic required packages if not available/installed.
################################################################################
install_missing_packages = function(pkg, version = NULL, verbose = TRUE) {
  # Check if package is already installed
  if (requireNamespace(pkg, quietly = TRUE)) {
    current_version <- packageVersion(pkg)
    if (!is.null(version) && compareVersion(as.character(current_version), version) < 0) {
      if (verbose) {
        message("Current version of package ", pkg, " (", current_version, ") is less than required (", version, "). Update will be attempted.")
      }
      BiocManager::install(pkg, update = FALSE)
    } else {
      if (verbose) {
        message("Package ", pkg, " is already installed with version ", current_version)
      }
    }
  } else {
    if (verbose) {
      message("The following package is missing: ", pkg, ". Installation will be attempted...")
    }
    BiocManager::install(pkg, update = FALSE)
  }
}

################################################################################
# Define list of package names and required versions.
################################################################################
deppkgs = c(phyloseq = "1.48.0",
            biomformat = "1.32.0",
            shiny = "1.9.1",
            shinythemes = "1.2.0", 
            DT = "0.33",
            ggplot2 = "3.5.1", 
            data.table = "1.16.0",
            networkD3 = "0.4",
            genefilter = "1.86.0", 
            grid = "4.4.1",
            gridExtra = "2.3", 
            markdown = "1.13", 
            rmarkdown = "2.28",
            png = "0.1-8", 
            RColorBrewer = "1.1-3",
            scales = "1.3.0")

# Loop on package check, install, update
pkg1 = mapply(install_missing_packages,
              pkg = names(deppkgs), 
              version = deppkgs,
              MoreArgs = list(verbose = TRUE), 
              SIMPLIFY = FALSE,
              USE.NAMES = TRUE)

################################################################################
# Load packages that must be fully-loaded 
################################################################################
for (i in names(deppkgs)) {
  library(i, character.only = TRUE)
  message(i, " package version: ", packageVersion(i))
}
################################################################################
```

```{r global, include=FALSE}
# load packages
# Default options for app startup
source("core/default-parameters.R", local = TRUE)
# For pasting times into things
simpletime = function(){gsub("\\D", "_", Sys.time())}
# Graphic-saving utilities
source("core/ggsave.R", local = TRUE)
################################################################################
# Function for standard-out phyloseq print summary in HTML
#
# http://stackoverflow.com/questions/18007440/how-to-change-font-size-in-html5
# http://www.w3schools.com/cssref/pr_font_font-size.asp
# http://stackoverflow.com/questions/19777515/r-shiny-mainpanel-display-style-and-font
################################################################################
output_phyloseq_print_html = function(physeq){
  HTML(
    paste(
      '<p class="phyloseq-print">',
      paste0(capture.output(print(physeq)), collapse=" <br/> "),
      "</p>"
    )
  )
  # Alternative tag way:
  #   do.call("p", args = c(list(class="phyloseq-print", 
  #                              sapply(c("alskfjs", "askfjls"), br, simplify = FALSE, USE.NAMES = FALSE))))
}
################################################################################
# Special variant of numericInput() that has a smaller default width,
# and is much more customizable, including `...`
# and an explicitly exposed `class` argument
#
# This is used by both ui.R and server.R
#
# Some helpful details. 
#
# http://shiny.rstudio.com/tutorial/lesson2/
# http://shiny.rstudio.com/articles/layout-guide.html
# http://stackoverflow.com/questions/20637248/shiny-4-small-textinput-boxes-side-by-side
# http://getbootstrap.com/2.3.2/base-css.html#forms
################################################################################
numericInputRow <- function(inputId, label, value, min = NA, max = NA, step = NA, class="form-control", ...){
  inputTag <- tags$input(id = inputId, type = "number", value = value, class=class, ...)
  if (!is.na(min)) 
    inputTag$attribs$min = min
  if (!is.na(max)) 
    inputTag$attribs$max = max
  if (!is.na(step)) 
    inputTag$attribs$step = step
  div(style="display:inline-block",
      tags$label(label, `for` = inputId), 
      inputTag)
}
textInputRow <- function(inputId, label, value = "", class="form-control", ...){
  div(style="display:inline-block",
      tags$label(label, `for` = inputId), 
      tags$input(id = inputId, type = "text", value = value, class=class, ...))
}
################################################################################
# Supported ggplot2 themes
################################################################################
theme_blank_custom = theme_bw() + theme(
  plot.title = element_text(size = 28),
  panel.grid.major = element_blank(), 
  panel.grid.minor = element_blank(), 
  axis.text.x      = element_blank(),
  axis.text.y      = element_blank(),
  axis.title.x     = element_blank(),
  axis.title.y     = element_blank(),
  axis.ticks       = element_blank(),
  panel.border     = element_blank()
)
shiny_phyloseq_ggtheme_list <- list(
  bl_wh = theme_bw(),
  blank = theme_blank_custom,
  thin = theme_linedraw(),
  light = theme_light(),
  minimal = theme_minimal(),
  classic = theme_classic(),
  gray = theme_gray()
)
################################################################################
# Included Data
# Define the named list of datasets to choose from
################################################################################
# Create an environment to store original loaded data
env_psdata = new.env()
# Keep server-loaded data into a special environemnt, `env_psdata`
data(list=c("GlobalPatterns", "enterotype", "esophagus"), envir = env_psdata)
load("data/kostic.RData", envir = env_psdata)
load("data/1457_uparse.RData", envir = env_psdata)
attach(env_psdata)
# Define initial list of available datasets
datalist = list(
  closed_1457_uparse = closed_1457_uparse,
  study_1457_Kostic = kostic,
  GlobalPatterns = GlobalPatterns,
  enterotype = enterotype,
  esophagus = esophagus)
########################################
# Plot Rendering Stuff.
########################################
RstudioPNGsp <- png::readPNG("www/RStudio-logo-shiny-phyloseq.png")
RasterRstudio <- grid::rasterGrob(RstudioPNGsp, interpolate=TRUE)
# Define a dummy "failed plot" to return if render section cannot build valid plot.
fail_gen = function(main = "Change settings and/or click buttons.",
                    subtext = "",
                    image = RasterRstudio){
  qplot(x=0, y=0, main=main) +
    annotation_custom(image, xmin=-Inf, xmax=Inf, ymin=-Inf, ymax=Inf) +
    annotate("text", 0, 0, size=10, color="black", hjust=0.5, vjust=-1,
             label=subtext) +
    theme_bw() + 
    theme(
      plot.title = element_text(size = 28),
      panel.grid.major = element_blank(), 
      panel.grid.minor = element_blank(), 
      axis.text.x      = element_blank(),
      axis.text.y      = element_blank(),
      axis.title.x     = element_blank(),
      axis.title.y     = element_blank(),
      axis.ticks       = element_blank(),
      panel.border     = element_blank()
    )
}
# Define a default controlled ggplot printing check for all print rendering
shiny_phyloseq_print = function(p, f=fail_gen()){
  if(inherits(p, "ggplot")){
    # Check that rendering will work
    printout = NULL
    try(printout <- print(p), silent=TRUE)
    if(is.null(printout)){
      # If still NULL, the print-render failed,
      # otherwise print() would have returned a 'list'
      # Nothing was printed. Print the fail graphic in its place.
      print(f)
    }
  } else {
    print(f)
  }
}    
# Define generic function to access/clean variables
# This especially converts "NULL" to NULL
av = function(x){
  if( isTRUE(all.equal(x, "")) | isTRUE(all.equal(x, "NULL")) ){
    return(NULL)
  }
  return(x)
}
# Generic variable-to-facet-formula conversion function
# for facet_grid.
# Could easily make a facet_row equivalent, if needed.
get_facet_grid = function(facetrow=NULL, facetcol=NULL){
  if(is.null(av(facetrow)) & is.null(av(facetcol))){
    return(NULL)
  } else if(is.null(av(facetcol))){
    # If no column value, add a "."
    formstring = paste(paste(facetrow, collapse = "+"), "~", ".")
  } else {
    formstring = paste(
      paste(facetrow, collapse = "+"),
      "~",
      paste(facetcol, collapse = "+")
    )
  }
  return(as.formula(formstring))
}
################################################################################
# Component table rendering functions.
################################################################################
# Defines a function to convert
# a phyloseq data component
# into a data.frame, data.table, or matrix
# For the purpose of DataTables screen rendering
tablify_phyloseq_component = function(component, colmax=25L){
  if(inherits(component, "sample_data")){
    Table = data.frame(component)
  }
  if(inherits(component, "taxonomyTable")){
    Table = component@.Data
  }
  if(inherits(component, "otu_table")){
    if(!taxa_are_rows(component)){component <- t(component)}
    Table = component@.Data
  }
  return(Table[, 1:min(colmax, ncol(Table))])
}
# Determine available table-like components for on-screen rendering
component_options = function(physeq){
  # Initialize the return option list
  component_option_list = list("NULL"="NULL")
  # Get logical vector of components
  nonEmpty = sapply(slotNames(physeq), function(x, ps){!is.null(access(ps, x))}, ps=physeq)
  if(sum(nonEmpty)<1){return(NULL)}
  # Convert to vector of slot-name strings for non-empty components
  nonEmpty <- names(nonEmpty)[nonEmpty]
  # Cull the non-table components
  nonEmpty <- nonEmpty[!nonEmpty %in% c("phy_tree", "refseq")]
  # If no tables available, return default empty option
  if(length(nonEmpty)<1){return(component_option_list)}
  # Otherwise add to the option list and return
  compFuncString = names(phyloseq:::get.component.classes()[nonEmpty])
  if("sam_data" %in% compFuncString){
    compFuncString[compFuncString=="sam_data"] <- "sample_data"
  }
  NiceNames = c(otu_table="OTU Table",
                sample_data="Sample Data",
                tax_table = "Taxonomy Table")
  names(compFuncString) <- NiceNames[compFuncString]
  return(c(component_option_list, as.list(compFuncString)))
}
################################################################################
# Supported distance methods
################################################################################
# List of distances
# Make available for relevant panels.
distlist <- as.list(unlist(phyloseq::distanceMethodList))
names(distlist) <- distlist
distlist <- distlist[which(!distlist %in% c("ANY"))]
################################################################################
# Rescaled extension of `distance` function
################################################################################
scaled_distance = function(physeq, method, type, rescaled=TRUE){
  Dist = phyloseq::distance(physeq, method, type)
  if(rescaled){
    # rescale the distance matrix to be [0, 1]
    Dist <- Dist / max(Dist, na.rm=TRUE)
    Dist <- Dist - min(Dist, na.rm=TRUE)
  }
  return(Dist)
}
################################################################################
# Function to convert a distance matrix and threshold value
# into an edge-table (essentially a sparse graph matrix).
# This is used by multiple panels.
################################################################################
dist_to_edge_table = function(Dist, MaxDistance=NULL, vnames = c("v1", "v2")){
  dmat <- as.matrix(Dist)
  # Set duplicate entries and self-links to Inf
  dmat[upper.tri(dmat, diag = TRUE)] <- Inf
  LinksData = data.table(reshape2::melt(dmat, varnames=vnames, as.is = TRUE))
  setnames(LinksData, old = "value", new = "Distance")
  # Remove self-links and duplicate links
  LinksData <- LinksData[is.finite(Distance), ]
  # Remove entries above the threshold, MaxDistance
  if(!is.null(MaxDistance)){
    LinksData <- LinksData[Distance < MaxDistance, ]
  }
  return(LinksData)
}
################################################################################
```

```{r ui, include=FALSE}
################################################################################
# Define generic graphic-type select UI.
################################################################################
# `graphicFormats` is defined globally, called by global.R when it sources ggsave.R
graphicTypeUI = function(inputId, label="Format", choices=graphicFormats, selected="pdf"){
  selectInput(inputId, label, choices, selected, multiple = FALSE, selectize = TRUE)
}
# Type for distance/network/ordination/etc. Samples/Taxa toggle
uitype = function(id="type", selected="taxa"){
  selectInput(inputId=id, label="Type",
              selected=selected,
              choices=list("Taxa"="taxa", "Samples"="samples"))
}
# UI for point size
uiptsz = function(id, ...){
  numericInputRow(inputId=id, label="Size", min=1, max=NA, value=5, step=1, ...)
}
# UI for point opacity slider
uialpha = function(id, ...){
  numericInputRow(inputId=id, label="Opacity", min=0, max=1, value=1, step=0.1, ...)
}
# UI function to define palettes. Reused in many panels.
uipal = function(id, default="Set1"){
  selectInput(id, "Palette",  
              choices = rownames(RColorBrewer::brewer.pal.info), 
              selected = default
  )
}
# UI function to define ggplot2 themes. Reused in many panels.
uitheme = function(id, default="bl_wh"){
  selectInput(id, "Theme",
              choices = names(shiny_phyloseq_ggtheme_list),
              selected = default
  )
}

################################################################################
# Multi-Widget Definitions
################################################################################
# Figure Dimensions and Download. Should return a single fluidRow, all 12 cols
dim_and_down = function(suffix, secTitle='Dimensions & Download'){
  fluidRow(column(
    width = 12,
    h4(secTitle),
    div(class="col-md-3", numericInputRow(paste0("width", suffix), "Width", 8, 1, 100, 1, class="col-md-12")),
    div(class="col-md-3", numericInputRow(paste0("height", suffix), "Height", 8, 1, 100, 1, class="col-md-12")),
    div(class='col-md-3', graphicTypeUI(paste0("downtype", suffix))),
    div(class='col-md-2', div(style="display:inline-block", tags$label("DL"),
                              downloadButton(paste0("download", suffix), '  ')))
  ))
}
# Theme and details. Some elements are optional. Suffix is required.
# Attempts to return a single row with palette, theme, and optionally point-size and opacity.
# `addList` is a list of additional elements for UI, attempt to add to row.
theme_ui_details = function(suffix, secTitle="Details", pal=TRUE, them=TRUE,
                            ptsz=FALSE, alpha=FALSE, addList=NULL){
  elementList = list(width = 12, h4(secTitle))
  if(pal){
    elementList <- c(elementList, list(
      div(class='col-md-4', uipal(paste0("pal", suffix)))
    ))    
  }
  if(them){
    elementList <- c(elementList, list(
      div(class='col-md-4', uitheme(paste0("theme", suffix)))
    ))     
  }
  if(ptsz){
    elementList <- c(elementList, list(
      div(class="col-md-3", uiptsz(paste0("size", suffix), class="col-md-12"))
    ))
  }
  if(alpha){
    elementList <- c(elementList, list(
      div(class="col-md-3", uialpha(paste0("alpha", suffix), class="col-md-12"))
    ))
  }
  # Add any additional row elements, if present
  elementList <- c(elementList, addList)
  return(fluidRow(do.call("column", args = elementList)))
}
# # Generic fluid row-split. r is number of elements in a row (max 12). 
# ui_row_split = function(..., r=2L){
#   elementList = list(width = 12L)
#   spanN = paste0("col-md-", floor(12/r))
#   elementList <- c(elementList,
#                    lapply(..., function(x, spanN){div(class=col-md-N, x)}, spanN))
#   return(fluidRow(do.call("column", args = elementList)))
# }

################################################################################
# Generic distance UI stuff.
################################################################################
#   Function to reate ui for distance method selection
#   NOTE: not all distance methods are supported if "taxa" selected for type. 
#   For example, the UniFrac distance and DPCoA cannot be calculated for taxa-wise 
#   distances, because they use a taxa-wise tree as part of their calculation 
#   between samples, and there is no transpose-equivalent for this tree
uidist = function(id, selected="bray"){
  return(selectInput(id, "Distance", distlist, selected=selected))
}
# Whether to use proportions or counts
uicttype = function(id="uicttype"){
  selectInput(inputId=id, label="Data",
              choices=c("Counts", "Proportions"),
              selected="Counts")
}

################################################################################
# Generic Ordination UI stuff.
################################################################################
# Define the ordination options list.
# Make available to other panels, if relevant.
ordlist = as.list(phyloseq::ordinate("list"))
names(ordlist) <- ordlist
ordlist = ordlist[-which(ordlist %in% c("MDS", "PCoA"))]
ordlist = c(list("MDS/PCoA"="MDS"), ordlist)

################################################################################
# Define each fluid page
################################################################################
# Define in a single function, a standard definition of panel-page
make_fluidpage = function(fptitle="", sbp, outplotid, markdownDoc=""){
  mdRow = fluidRow(column(width = 12, " "))
  if(nchar(markdownDoc) > 0){
    # If md doc specified, replace `mdRow` with actual doc.
    mdRow <- fluidRow(column(width = 12,
                             includeMarkdown(file.path("panels/paneldoc", markdownDoc))
    )) 
  }
  fluidPage(
    headerPanel(fptitle, "windowTitle"), 
    fluidRow(sbp, column(width=8, plotOutput(outplotid))),
    mdRow
  )
}

################################################################################
source("panels/panel_ui_net.R", local = TRUE)
source("panels/panel_ui_bar.R", local = TRUE)
source("panels/panel_ui_ordination.R", local = TRUE)
source("panels/panel_ui_richness.R", local = TRUE)
source("panels/panel_ui_tree.R", local = TRUE)
source("panels/panel_ui_heatmap.R", local = TRUE)
source("panels/panel_ui_scatter.R", local = TRUE)
source("panels/panel_ui_d3.R", local = TRUE)
source("panels/panel_ui_data.R", local = TRUE)
source("panels/panel_ui_filter.R", local = TRUE)
source("panels/panel_ui_palette.R", local = TRUE)
source("panels/panel_ui_provenance.R", local = TRUE)

################################################################################
# Transform panel is only documentation. Define differently.
################################################################################
transpage = fluidPage(
  headerPanel("Transform Widget Documentation"),
  fluidRow(column(width = 12, 
                  includeMarkdown("panels/paneldoc/transform.md")
  ))
)

################################################################################
# Define general header tag list 
# List of tags to display as a common header above all tabPanels.
################################################################################
headerTagList = list(
  tags$style(type="text/css", ".phyloseq-print { font-size: 10px; }"),
  tags$base(target="_blank")
)

################################################################################
# Define the full user-interface, `ui`
################################################################################
ui = navbarPage(
  title = h4(a(href="http://joey711.github.io/shiny-phyloseq/", style="color:#F0F0F0",  "Shiny-phyloseq")),
  tabPanel("Select Dataset", datapage),
  tabPanel("Filter", filterpage),
  tabPanel("Alpha Diversity", richpage),
  tabPanel("Network", netpage),
  tabPanel("d3Network", d3netpage),
  tabPanel("Ordination", ordpage),
  tabPanel("Heatmap", heatpage),
  tabPanel("Tree", treepage),
  tabPanel("Scatter", scatpage),
  tabPanel("Bar", barpage),
  tabPanel("Palette", palpage),
  tabPanel("Transform", transpage),
  tabPanel("Provenance", provpage),
  header = headerTagList,
  collapsible = TRUE,
  windowTitle = "Shiny-phyloseq"
)

# shinyUI(ui)
################################################################################
```

```{r server, include=FALSE}
################################################################################
# Options, default settings, and load packages
################################################################################
# By default, the file size limit is 5MB. It can be changed by
# setting this option. Here we'll raise limit to 9MB.
options(shiny.maxRequestSize = 100*1024^2)
# Set Shiny Reaction Log to TRUE
options(shiny.reactlog=TRUE)
# Default ggplot2 theme (Only relevant if panel-specific theme missing or NULL)
theme_set(theme_bw())

################################################################################
# Begin Shiny Server definition.
################################################################################
# First store the inventory of objects (for provenance record)
shinyPhyloseqServerObjectsList = ls()

server = function(input, output){
  # Data panel
  source("panels/panel_server_data.R", local = TRUE)
  # Filtering
  source("panels/panel_server_filter.R", local = TRUE)
  ########################################
  # Reactive UI Definition of Variables
  ########################################
  # Define data-reactive variable lists
  rankNames = reactive({
    rankNames = as.list(rank_names(physeq(), errorIfNULL=FALSE))
    names(rankNames) <- rankNames
    return(rankNames)
  })
  variNames = reactive({
    variNames = as.list(sample_variables(physeq(), errorIfNULL=FALSE))
    names(variNames) <- variNames
    return(variNames)
  })
  vars = function(type="both", withnull=TRUE, singles=FALSE){
    if(!type %in% c("both", "taxa", "samples")){
      stop("incorrect `type` specification when accessing variables for UI.")
    }
    returnvars = NULL
    if(type=="samples"){
      if(singles){
        returnvars <- c(list(Sample="Sample"), variNames())
      } else {
        returnvars <- variNames()
      }
    }
    if(type=="taxa"){
      if(singles){
        returnvars <- c(rankNames(), list(OTU="OTU"))
      } else {
        returnvars <- rankNames()
      }
    } 
    if(type=="both"){
      # Include all variables
      if(singles){
        returnvars <- c(rankNames(), variNames(), list(OTU="OTU", Sample="Sample"))
      } else {
        returnvars <- c(rankNames(), variNames())
      }
    }
    if(withnull){
      # Put NULL first so that it is default when `select` not specified
      returnvars <- c(list("NULL"="NULL"), returnvars)
    }
    return(returnvars)
  }
  # A generic selectInput UI. Plan is to pass a reactive argument to `choices`.
  uivar = function(id, label="Variable:", choices, selected="NULL"){
    selectInput(inputId=id, label=label, choices=choices, selected=selected)
  }
  # Bar
  source("panels/panel_server_bar.R", local = TRUE)
  # Tree
  source("panels/panel_server_tree.R", local = TRUE)
  # Heatmap
  source("panels/panel_server_heatmap.R", local = TRUE)
  # Richness
  source("panels/panel_server_richness.R", local = TRUE)
  # Ordination
  source("panels/panel_server_ordination.R", local = TRUE)
  # Network
  source("panels/panel_server_net.R", local = TRUE)
  # d3
  source("panels/panel_server_d3.R", local = TRUE)
  # Scatter
  source("panels/panel_server_scatter.R", local = TRUE)
  # Palette
  source("panels/panel_server_palette.R", local = TRUE)
  # Provenance
  source("panels/panel_server_provenance.R", local = TRUE)
}
################################################################################
```

```{r app, echo=FALSE}
shinyApp(ui = ui, server = server)
```