---
title: "Phyloseq Dashboard"
format: 
  html: 
    embed-resources: true
    theme: lux
    toc: true
    number-sections: true
editor: visual
filters: 
  - lightbox
---

```{r install, include=FALSE}
# Check R version
r_min_version <- "4.3.0"
if (compareVersion(as.character(getRversion()), r_min_version) < 0) {
  stop("R version ", r_min_version, " or higher is required. Please update R from http://cran.r-project.org/")
}

# Install or update BiocManager
if (!requireNamespace("BiocManager", quietly = TRUE)) {
  install.packages("BiocManager")
}
BiocManager::install(update = TRUE, ask = FALSE)

# Function to install or update packages
install_or_update_package <- function(pkg, version = NULL) {
  if (!requireNamespace(pkg, quietly = TRUE) || (is.null(version) && !is.null(packageVersion(pkg)) && packageVersion(pkg) < version)) {
    message("Installing/updating package: ", pkg)
    BiocManager::install(pkg, update = FALSE, ask = FALSE)
  }
}

# List of required packages with versions
required_packages <- c(
  phyloseq = "1.48.0", biomformat = "1.32.0", shiny = "1.9.1",
  shinythemes = "1.2.0", ggplot2 = "3.5.1", data.table = "1.16.2",
  networkD3 = "0.4", genefilter = "1.86.0", grid = "4.4.1",
  gridExtra = "2.3", markdown = "1.13", rmarkdown = "2.28", bslib = "0.8.0",
  png = "0.1.8", RColorBrewer = "1.1.3", scales = "1.3.0", DT = "0.33"
)

# Install or update required packages
invisible(mapply(install_or_update_package, names(required_packages),
                 required_packages))

# Load and display versions of installed packages
sapply(names(required_packages), function(pkg) {
  library(pkg, character.only = TRUE)
  message(pkg, " package version: ", packageVersion(pkg))
})
```

```{r global, include=FALSE}
# Load packages, default parameters and ggsave custom
source("parameters_ggsave.R", local = TRUE)

# Load datasets
env_psdata <- new.env()
data(list = c("GlobalPatterns", "enterotype", "esophagus"), envir = env_psdata)
load("data/kostic.RData", envir = env_psdata)
load("data/1457_uparse.RData", envir = env_psdata)
load("data/agave.RData", envir = env_psdata)
attach(env_psdata)

## Define initial list of available datasets
datalist <- list(
  closed_1457_uparse = closed_1457_uparse,
  study_1457_Kostic = kostic,
  GlobalPatterns = GlobalPatterns,
  enterotype = enterotype,
  esophagus = esophagus,
  Agave = agave
)

# Utility functions
## For pasting times into things
simpletime <- function() {
  gsub("\\D", "_", Sys.time())
}

## Convert output phyloseq in HTML
output_phyloseq_print_html <- function(physeq) {
  HTML(
    paste(
      '<p class="phyloseq-print">',
      paste0(capture.output(print(physeq)), collapse = " <br/> "),
      "</p>"
    )
  )
}

## Create numeric input
numericInputRow <- function(inputId, label, value, min = NA, max = NA, step = NA, class="form-control", ...) {
  inputTag <- tags$input(id = inputId, type = "number", value = value, class=class, ...)
  if (!is.na(min))
    inputTag$attribs$min <- min
  if (!is.na(max))
    inputTag$attribs$max <- max
  if (!is.na(step))
    inputTag$attribs$step <- step
  div(style = "display:inline-block",
      tags$label(label, `for` = inputId),
      inputTag)
}

## Create text input
textInputRow <- function(inputId, label, value = "", class = "form-control", ...) {
  div(style = "display:inline-block",
      tags$label(label, `for` = inputId),
      tags$input(id = inputId, type = "text", value = value, class = class, ...))
}

# Plot customization
## ggplot2 themes
theme_blank_custom <- theme_bw() +
  theme(
    plot.title = element_text(size = 28),
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    axis.text.x = element_blank(),
    axis.text.y = element_blank(),
    axis.title.x = element_blank(),
    axis.title.y = element_blank(),
    axis.ticks = element_blank(),
    panel.border = element_blank()
  )

## ggplot2 themes list
shiny_phyloseq_ggtheme_list <- list(
  bl_wh = theme_bw(),
  blank = theme_blank_custom,
  thin = theme_linedraw(),
  light = theme_light(),
  minimal = theme_minimal(),
  classic = theme_classic(),
  gray = theme_gray()
)

# Failed plots
## Plot of fail rendering
RstudioPNGsp <- png::readPNG("www/RStudio-logo-shiny-phyloseq.png")
RasterRstudio <- grid::rasterGrob(RstudioPNGsp, interpolate = TRUE)
fail_gen <- function(main = "Change settings and/or click buttons.", subtext = "", image = RasterRstudio) {
  qplot(x = 0, y = 0, main = main) +
    annotation_custom(image, xmin = -Inf, xmax = Inf, ymin = -Inf, ymax = Inf) +
    annotate("text", 0, 0, size = 10, color = "black", hjust = 0.5, vjust = -1, label = subtext) +
    theme_blank_custom
}

## Print plot shiny conditional
shiny_phyloseq_print = function(p, f = fail_gen()) {
  if (inherits(p, "ggplot")) {
    printout <- NULL
    try(printout <- print(p), silent=TRUE)
    if(is.null(printout)){
      print(f)
    }
  } else {
    print(f)
  }
}

# Functions for handling variables or objects
## Null data processing
av = function(x) {
  if (isTRUE(all.equal(x, "")) | isTRUE(all.equal(x, "NULL"))) {
    return(NULL)
  }
  return(x)
}

## Faceted plost (subplots)
get_facet_grid <- function(facetrow=NULL, facetcol=NULL) {
  if (is.null(av(facetrow)) & is.null(av(facetcol))) {
    return(NULL)
  } else if (is.null(av(facetcol))) {
    formstring = paste(paste(facetrow, collapse = "+"), "~", ".")
  } else {
    formstring <- paste(paste(facetrow, collapse = "+"), "~",
                  paste(facetcol, collapse = "+"))
  }
  return(as.formula(formstring))
}

## Convert phyloseq object to table
tablify_phyloseq_component <- function(component, colmax=25L) {
  if (inherits(component, "sample_data")) {
    Table <- data.frame(component)
  }
  if (inherits(component, "taxonomyTable")) {
    Table <- component@.Data
  }
  if (inherits(component, "otu_table")) {
    if (!taxa_are_rows(component)) {
      component <- t(component)
    }
    Table <- component@.Data
  }
  return(Table[, 1:min(colmax, ncol(Table))])
}

## Filter components of phyloseq object
component_options <- function(physeq) {
  component_option_list <- list("NULL"="NULL")
  nonEmpty <- sapply(slotNames(physeq),
                     function(x, ps) { !is.null(access(ps, x)) }, ps = physeq)
  if (sum(nonEmpty)<1) { return(NULL) }
  nonEmpty <- names(nonEmpty)[nonEmpty]
  nonEmpty <- nonEmpty[!nonEmpty %in% c("phy_tree", "refseq")]
  if (length(nonEmpty)<1) { return(component_option_list) }
  compFuncString <- names(phyloseq:::get.component.classes()[nonEmpty])
  if ("sam_data" %in% compFuncString) { compFuncString[compFuncString == "sam_data"] <- "sample_data" }
  NiceNames <- c(otu_table="OTU Table", sample_data="Sample Data", tax_table = "Taxonomy Table")
  names(compFuncString) <- NiceNames[compFuncString]
  return(c(component_option_list, as.list(compFuncString)))
}

# Distance
## Distance methods
distlist <- as.list(unlist(phyloseq::distanceMethodList))
names(distlist) <- distlist
distlist <- distlist[which(!distlist %in% c("ANY"))]

## Distance matrix calculation
scaled_distance <- function(physeq, method, type, rescaled = TRUE){
  Dist = phyloseq::distance(physeq, method, type)
  if(rescaled){
    Dist <- Dist / max(Dist, na.rm=TRUE)
    Dist <- Dist - min(Dist, na.rm=TRUE)
  }
  return(Dist)
}

## Convert distance matrix to edge table
dist_to_edge_table <- function(Dist, MaxDistance = NULL, vnames = c("v1", "v2")){
  dmat <- as.matrix(Dist)
  dmat[upper.tri(dmat, diag = TRUE)] <- Inf
  LinksData <- data.table(reshape2::melt(dmat, varnames=vnames, as.is = TRUE))
  setnames(LinksData, old = "value", new = "Distance")
  LinksData <- LinksData[is.finite(Distance), ]
  if(!is.null(MaxDistance)){
    LinksData <- LinksData[Distance < MaxDistance, ]
  }
  return(LinksData)
}
```

```{r ui, include=FALSE}
# UI helper functions
## Plot format
graphicTypeUI <- function(inputId, label = "Format", choices = graphicFormats, selected = "pdf") {
  selectInput(inputId, label, choices, selected,
              multiple = FALSE, selectize = TRUE)
}

## Taxa and sample
uitype <- function(id = "type", selected = "taxa") {
  selectInput(inputId = id, label = "Type",
              selected = selected,
              choices = list("Taxa" = "taxa", "Samples" = "samples"))
}

## Plot Size
uiptsz <- function(id, ...) {
  numericInputRow(inputId = id, label = "Size",
                  min = 1, max = NA, value = 5, step = 1, ...)
}

## Opacity
uialpha <- function(id, ...) {
  numericInputRow(inputId = id, label = "Opacity",
                  min = 0, max = 1, value = 1, step = 0.1, ...)
}

## Color pallete
uipal <- function(id, default = "Set1") {
  selectInput(id, "Palette", choices = rownames(RColorBrewer::brewer.pal.info), selected = default
  )
}

## Plot theme
uitheme <- function(id, default="bl_wh"){
  selectInput(id, "Theme",
              choices = names(shiny_phyloseq_ggtheme_list),
              selected = default
  )
}

## Multi-widget definitions
dim_and_down <- function(suffix, secTitle = "Dimensions & Download") {
  fluidRow(
    column(width = 12,
      h4(secTitle),
      div(class = "col-md-3", numericInputRow(paste0("width", suffix), "Width", 8, 1, 100, 1, class = "col-md-12")),
      div(class = "col-md-3", numericInputRow(paste0("height", suffix), "Height", 8, 1, 100, 1, class = "col-md-12")),
      div(class = "col-md-3", graphicTypeUI(paste0("downtype", suffix))),
      div(class = "col-md-2", div(style = "display:inline-block", tags$label("DL"), downloadButton(paste0("download", suffix), "  ")))
    )
  )
}

## Select details of plots
theme_ui_details <- function(suffix, secTitle = "Details", pal = TRUE, them = TRUE, ptsz = FALSE, alpha = FALSE, addList = NULL) {
  elementList <- list(width = 12, h4(secTitle))
  if (pal) {
    elementList <- c(elementList, list(div(class = "col-md-4", uipal(paste0("pal", suffix)))))
  }
  if (them) {
    elementList <- c(elementList, list(div(class = "col-md-4", uitheme(paste0("theme", suffix)))))
  }
  if (ptsz) {
    elementList <- c(elementList, list(div(class = "col-md-3", uiptsz(paste0("size", suffix), class = "col-md-12"))))
  }
  if (alpha) {
    elementList <- c(elementList, list(div(class = "col-md-3", uialpha(paste0("alpha", suffix), class = "col-md-12"))))
  }
  elementList <- c(elementList, addList)
  return(fluidRow(do.call("column", args = elementList)))
}

# Generic distance UI stuff.
## NOTE: not all distance methods are supported if "taxa" selected for type.
uidist <- function(id, selected = "bray") {
  return(selectInput(id, "Distance", distlist, selected = selected))
}
## Whether to use proportions or counts
uicttype <- function(id = "uicttype") {
  selectInput(inputId = id, label = "Data",
              choices = c("Counts", "Proportions"),
              selected = "Counts")
}

# Generic Ordination UI stuff.
ordlist <- as.list(phyloseq::ordinate("list"))
names(ordlist) <- ordlist
ordlist <- ordlist[-which(ordlist %in% c("MDS", "PCoA"))]
ordlist <- c(list("MDS/PCoA" = "MDS"), ordlist)

# Define each fluid page
make_fluidpage <- function(fptitle = "", sbp, outplotid, markdownDoc = "") {
  mdRow <- fluidRow(column(width = 12, " "))
  if (nchar(markdownDoc) > 0) {
    mdRow <- fluidRow(column(width = 12, includeMarkdown(file.path("panels/paneldoc", markdownDoc))))
  }
  fluidPage(
    headerPanel(fptitle, "windowTitle"),
    fluidRow(sbp, column(width = 8, plotOutput(outplotid))),
    mdRow
  )
}

## Load panels UIs
source("panels/panel_ui_data.R", local = TRUE)
source("panels/panel_ui_filter.R", local = TRUE)
source("panels/panel_ui_richness.R", local = TRUE)
source("panels/panel_ui_net.R", local = TRUE)
source("panels/panel_ui_d3.R", local = TRUE)
source("panels/panel_ui_ordination.R", local = TRUE)
source("panels/panel_ui_heatmap.R", local = TRUE)
source("panels/panel_ui_tree.R", local = TRUE)
source("panels/panel_ui_scatter.R", local = TRUE)
source("panels/panel_ui_bar.R", local = TRUE)
source("panels/panel_ui_palette.R", local = TRUE)
source("panels/panel_ui_provenance.R", local = TRUE)

# Transform panel is only documentation
transpage <- fluidPage(
  headerPanel("Transform Widget Documentation"),
  fluidRow(column(width = 12, includeMarkdown("panels/paneldoc/transform.md")))
)

# Header tag list
# headerTagList <- list(
#  tags$style(type = "text/css", ".phyloseq-print { font-size: 10px; }"),
#  tags$base(target = "_blank")
#)
headerTagList <- list(
  tags$style(type = "text/css", "
    .phyloseq-print { font-size: 10px; }
    .navbar-default .navbar-brand { color: #18bc9c; } 
    .navbar-default { background-color: #2c3e50; }
  "),
  tags$base(target = "_blank")
)

# Shiny theme
my_theme <- bs_theme(
  bootswatch = "flatly",
  primary = "#2c3e50",
  secondary = "#18bc9c",
  base_font = font_google("Roboto"),
  heading_font = font_google("Lato")
)

# Principal UI function
ui <- navbarPage(
  title = h4(a(href = "http://joey711.github.io/shiny-phyloseq/",
               style = "color:#F0F0F0", "Shiny-phyloseq")),
  theme = my_theme,
  tabPanel("Select Dataset", datapage),
  tabPanel("Filter", filterpage),
  tabPanel("Alpha Diversity", richpage),
  tabPanel("Network", netpage),
  tabPanel("d3Network", d3netpage),
  tabPanel("Ordination", ordpage),
  tabPanel("Heatmap", heatpage),
  tabPanel("Tree", treepage),
  tabPanel("Scatter", scatpage),
  tabPanel("Bar", barpage),
  tabPanel("Palette", palpage),
  tabPanel("Transform", transpage),
  tabPanel("Provenance", provpage),
  header = headerTagList,
  collapsible = TRUE,
  windowTitle = "Shiny-phyloseq"
)
# shinyUI(ui)
```

```{r server, include=FALSE}
# Set Shiny options
options(shiny.maxRequestSize = 100 * 1024^2)
options(shiny.reactlog = TRUE)

# Set deafult ggplot2 theme
theme_set(theme_bw())

# Principal Server function
## Store the inventory of objects
shinyPhyloseqServerObjectsList <- ls()
server <- function(input, output) {
  ## Data and filtering panels
  source("panels/panel_server_data.R", local = TRUE)
  source("panels/panel_server_filter.R", local = TRUE)
  ## Reactive UI definition of variables
  rankNames <- reactive({
    rankNames <- as.list(rank_names(physeq(), errorIfNULL = FALSE))
    names(rankNames) <- rankNames
    return(rankNames)
  })
  variNames <- reactive({
    variNames <- as.list(sample_variables(physeq(), errorIfNULL = FALSE))
    names(variNames) <- variNames
    return(variNames)
  })
  vars <- function(type = "both", withnull = TRUE, singles = FALSE){
    if(!type %in% c("both", "taxa", "samples")){
      stop("incorrect `type` specification when accessing variables for UI.")
    }
    returnvars <- NULL
    if (type == "samples") {
      if (singles) {
        returnvars <- c(list(Sample = "Sample"), variNames())
      } else {
        returnvars <- variNames()
      }
    }
    if (type == "taxa") {
      if (singles) {
        returnvars <- c(rankNames(), list(OTU = "OTU"))
      } else {
        returnvars <- rankNames()
      }
    }
    if (type == "both") {
      if (singles) {
        returnvars <- c(rankNames(), variNames(),
                        list(OTU = "OTU", Sample = "Sample"))
      } else {
        returnvars <- c(rankNames(), variNames())
      }
    }
    if (withnull) {
      returnvars <- c(list("NULL" = "NULL"), returnvars)
    }
    return(returnvars)
  }
  uivar <- function(id, label = "Variable:", choices, selected = "NULL") {
    selectInput(inputId = id, label = label,
                choices = choices, selected = selected)
  }
  # Load other panel modules
  source("panels/panel_server_bar.R", local = TRUE)
  source("panels/panel_server_tree.R", local = TRUE)
  source("panels/panel_server_heatmap.R", local = TRUE)
  source("panels/panel_server_richness.R", local = TRUE)
  source("panels/panel_server_ordination.R", local = TRUE)
  source("panels/panel_server_net.R", local = TRUE)
  source("panels/panel_server_d3.R", local = TRUE)
  source("panels/panel_server_scatter.R", local = TRUE)
  source("panels/panel_server_palette.R", local = TRUE)
  source("panels/panel_server_provenance.R", local = TRUE)
}
```

```{r app, echo=FALSE}
shinyApp(ui = ui, server = server)
```